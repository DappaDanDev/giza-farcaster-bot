mod xgb_inference;

fn main(input_vector: Span<i32>) -> i32 {
    let tree_0 = xgb_inference::Tree {
    base_weights: array![-24635, -88291, 85559, -97949, -53264, 59389, 65628, -30631, -44593, -13107, -92355, 75448, -73468, 3446, -28045, -43327, 91985, -41155, -103083, 44836, 105871, -6538, -81142, -6956, 10131, -29191, -7905, 48966, -6538, -23704, 7338, -33409, -8781, 21807, 50448, 74979, 80207, -28045, -6538, 16677, -17646, 23076, -5148, -14395, 31700].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 0, 0, 13, 15, 17, 19, 21, 23, 0, 25, 27, 29, 31, 33, 35, 0, 37, 0, 0, 0, 39, 0, 0, 0, 0, 0, 0, 41, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 0, 0, 14, 16, 18, 20, 22, 24, 0, 26, 28, 30, 32, 34, 36, 0, 38, 0, 0, 0, 40, 0, 0, 0, 0, 0, 0, 42, 0, 0, 44, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![2, 2, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 2, 2, 0, 0, 1, 1, 1, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![-27222, -46294, 27360, -13240, 14837, 84654, 65628, -30631, -8062, -2281, -14898, 4008, -5232, -51159, -28045, -62259, -13413, -15381, -11376, 144032, 17639, -6538, 4954, -6956, 10131, -29191, -16331, 48966, -6538, -23704, 7338, -33409, -8781, -6301, 50448, 74979, 26254, -28045, -6538, 16677, -17646, 23076, -5148, -14395, 31700].span()
};
    let tree_1 = xgb_inference::Tree {
    base_weights: array![-20619, -76317, 52700, -85848, -44716, 63707, -71313, -27026, -37587, -13009, -88939, 39249, 104885, -5619, -79430, 2900, -25336, 25837, -80917, -29716, -31611, 50700, -61039, 126553, 63392, -6219, -27376, 39876, -19931, -19988, 93311, -7564, -27612, -20871, 9349, 17544, 104951, -27811, 7845, 71393, 45458, 81028, -10059, -2043, 25114, 11425, -26674, 5217, 45324, 11526, -12248, 38354, -22849, 47917, 3662, -8349, 30544].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 0, 15, 17, 19, 21, 23, 0, 25, 27, 0, 29, 31, 33, 0, 35, 37, 39, 41, 0, 0, 43, 0, 45, 47, 0, 0, 0, 0, 49, 51, 0, 0, 53, 0, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 0, 16, 18, 20, 22, 24, 0, 26, 28, 0, 30, 32, 34, 0, 36, 38, 40, 42, 0, 0, 44, 0, 46, 48, 0, 0, 0, 0, 50, 52, 0, 0, 54, 0, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![2, 2, 0, 1, 2, 1, 2, 0, 1, 0, 0, 1, 0, 0, 0, 2, 0, 2, 2, 0, 0, 2, 2, 2, 2, 0, 0, 2, 0, 1, 1, 0, 0, 0, 0, 1, 2, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![-27222, -46294, 84654, -13240, -36369, 6991, -5232, -27026, -8062, 42790, -18678, 4367, 29641, -5619, 88157, -49797, -25336, -40650, -44542, -84822, -31611, 35830, 132939, 144032, 418233, -6219, -27376, -51354, -19931, -13724, -12481, -7564, -27612, -20871, 9349, -5127, 155708, -27811, 7845, 1580, 45458, 11272, -10059, -2043, 25114, 11425, -26674, 5217, 45324, 11526, -12248, 38354, -22849, 47917, 3662, -8349, 30544].span()
};
    let tree_2 = xgb_inference::Tree {
    base_weights: array![-17542, -65868, 34435, -81000, -47066, 41883, -63170, -84787, -42809, -30332, -33557, 30377, 87778, -4830, -71016, -30731, -65803, 9845, -68429, -12829, -89996, -44327, 34925, 43168, 50645, -24710, -4977, -23627, -76690, -5755, -24270, 20790, -22330, -2637, -30131, 6101, -24735, -32162, 42697, -13323, 81176, -17129, 8097, -3369, -25668, -25867, -3080, 5599, -17343, 23404, 7864, 35971, -183].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 17, 0, 19, 21, 23, 0, 25, 0, 27, 0, 29, 31, 33, 35, 37, 0, 39, 0, 0, 41, 43, 0, 0, 0, 45, 0, 0, 0, 0, 47, 49, 0, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 18, 0, 20, 22, 24, 0, 26, 0, 28, 0, 30, 32, 34, 36, 38, 0, 40, 0, 0, 42, 44, 0, 0, 0, 46, 0, 0, 0, 0, 48, 50, 0, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![2, 1, 0, 0, 0, 1, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 2, 0, 1, 0, 2, 0, 1, 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![-27222, -15761, 84654, 99588, -83628, 27360, -5232, -16486, 104687, -30332, 62989, -283384, 36854, -4830, 9891, -30731, -16382, 9845, -67895, -37673, -15484, -290710, -18854, 43168, 44001, -24710, -4977, -16417, -62641, -5755, -24270, 20790, -23949, -2637, -30131, 6101, -24735, -12895, -6301, -13323, 12075, -17129, 8097, -3369, -25668, -25867, -3080, 5599, -17343, 23404, 7864, 35971, -183].span()
};
    let tree_3 = xgb_inference::Tree {
    base_weights: array![-15084, -55268, 27189, -31303, -47159, 38204, 22265, -67663, -23805, -7855, 41417, -11870, -72955, -5975, -77950, -64894, 3357, 47928, -51735, -22593, 25958, -25822, -55654, 21328, -39595, -2330, -26242, -3926, -26899, 50883, -26716, -5307, 54397, -2644, -20345, 9132, -19406, -18355, 21289, 13494, -17075, 924, 31374, -17643, 4252, 23674, -18975, 33213, 12467].span(),
    left_children: array![1, 3, 5, 0, 7, 0, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 0, 0, 0, 35, 37, 39, 0, 0, 0, 0, 41, 43, 45, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 0, 8, 0, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 0, 0, 0, 36, 38, 40, 0, 0, 0, 0, 42, 44, 46, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 2, 1, 1, 0, 2, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![-10789, -56290, -10340, -31303, -15623, 38204, 500, -19695, 62989, -9167, 84654, -29214, 54793, -13344, -51354, -9822, -6612, -283813, 125155, -22593, 25958, -25822, 59762, -46294, -50964, -2330, -26242, -3926, -26899, 7418, 9878, -292036, -42815, -2644, -20345, 9132, -19406, -18355, 21289, 13494, -17075, 924, 31374, -17643, 4252, 23674, -18975, 33213, 12467].span()
};
    let tree_4 = xgb_inference::Tree {
    base_weights: array![-12629, -49501, 16938, -72790, -38097, 21335, -51302, -51418, -28883, 8264, -41957, 9529, 41872, -21346, -18675, -70397, 10095, -51171, -1281, 17246, -63468, 36835, 33020, 10958, -19113, -76554, -3277, -42220, -28067, 47188, -24975, -10724, 35740, -26801, 2453, -21531, 40231, -27176, -12876, -17699, -1583, -2904, 43117, 26569, -7487, 3086, 24926, -18025, 8849, 38284, 8017].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 0, 0, 17, 19, 21, 0, 23, 25, 0, 27, 29, 31, 33, 0, 35, 0, 0, 37, 0, 39, 0, 41, 0, 43, 45, 0, 0, 47, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 0, 0, 18, 20, 22, 0, 24, 26, 0, 28, 30, 32, 34, 0, 36, 0, 0, 38, 0, 40, 0, 42, 0, 44, 46, 0, 0, 48, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![2, 2, 0, 2, 2, 1, 1, 2, 0, 0, 1, 1, 2, 0, 2, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 2, 0, 2, 0, 2, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![-29168, -55440, 84654, -60889, -55051, 6991, -4126, -64003, -28883, 8264, -12239, 4367, -8735, -21346, 96742, 104843, 10095, -13413, -37147, 7418, 132939, 36835, -283813, 10958, -19113, -66533, -3277, -46294, -28067, -40650, -24975, -26639, 32543, -26801, 2453, 96742, -84822, -27176, -12876, -17699, -1583, -2904, 43117, 26569, -7487, 3086, 24926, -18025, 8849, 38284, 8017].span()
};
    let tree_5 = xgb_inference::Tree {
    base_weights: array![-10225, -41497, 13202, -81877, -34527, 16561, -55839, -27475, -4081, 11121, -42127, 3604, 28330, -2835, -21057, -26326, 23193, -73902, -28959, -44979, 16829, 69739, 18631, 13692, -62820, -79749, -2732, -16904, -27227, -951, -24790, 78966, 1814, 97934, -10517, 10676, 32434, -2455, -23518, -25947, -2824, -8349, 11583, 8475, -12747, 6745, 33250, -26588, 4200, 34429, 4747, -15800, 5508].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 0, 0, 15, 17, 19, 21, 0, 0, 23, 0, 25, 27, 29, 31, 33, 35, 0, 37, 39, 0, 41, 0, 43, 0, 45, 47, 49, 0, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 0, 0, 16, 18, 20, 22, 0, 0, 24, 0, 26, 28, 30, 32, 34, 36, 0, 38, 40, 0, 42, 0, 44, 0, 46, 48, 50, 0, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![2, 0, 0, 1, 0, 1, 2, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 0, 1, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![-27222, -56290, 88157, -8614, -18678, 1881, 1580, -27475, -4081, -23949, -55440, -31694, 55680, -2835, -21057, -37673, 23193, 107788, -36369, -78942, -11859, 57810, 85740, 13692, -60889, -13758, -2732, -12239, -27227, 38166, -24790, 31968, -10927, 42790, -10517, 78644, 32434, -2455, -23518, -25947, -2824, -8349, 11583, 8475, -12747, 6745, 33250, -26588, 4200, 34429, 4747, -15800, 5508].span()
};
    let tree_6 = xgb_inference::Tree {
    base_weights: array![-8617, -41881, 5419, -69056, -33645, 11986, -27484, -26952, 3897, 9392, -38939, 79403, 7679, -24592, 16922, -66357, -22912, 8772, 30702, -28373, 15283, 55051, -32945, -72559, -2337, 17036, -36687, -58853, 715, 84192, 9498, -10866, 32833, 5217, -18536, -23992, -2423, -16587, 34765, 2867, -19576, -7500, -21748, 8264, -21133, 31272, 3503, -22048, 4540, 17095, -23007].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 0, 0, 0, 15, 17, 19, 0, 21, 23, 25, 0, 0, 27, 29, 31, 33, 35, 0, 37, 39, 41, 43, 45, 47, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 0, 0, 0, 16, 18, 20, 0, 22, 24, 26, 0, 0, 28, 30, 32, 34, 36, 0, 38, 40, 42, 44, 46, 48, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![2, 0, 0, 1, 0, 1, 1, 0, 0, 0, 2, 2, 1, 0, 2, 0, 2, 0, 0, 0, 1, 2, 0, 1, 0, 0, 0, 2, 1, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![-44737, -28772, 59762, -13240, -19695, -14656, -5403, -26952, 3897, 9392, -55440, -41818, -11376, -24592, 122820, 107788, -53883, 8772, 30702, -10484, -10168, 58210, 69710, -13758, -2337, 70451, 33729, -32866, -12067, -11628, -8890, 10142, 32833, 5217, -18536, -23992, -2423, -16587, 34765, 2867, -19576, -7500, -21748, 8264, -21133, 31272, 3503, -22048, 4540, 17095, -23007].span()
};
    let tree_7 = xgb_inference::Tree {
    base_weights: array![-7297, -29344, 6865, -24534, -23676, 9095, -45583, -52993, -13019, 4260, 30485, -2972, -17532, -72421, 18834, -1442, -25584, 7536, -54507, 82147, 2674, -26478, -32005, -3731, 13002, 25020, -7681, 3659, 43421, -24356, -1440, 9304, 31629, 31426, -48187, 2626, -18888, 432, -15912, 2432, -13787, 20854, -9253, -5433, 15254, -25119, 6621].span(),
    left_children: array![1, 3, 5, 0, 7, 9, 11, 13, 15, 17, 19, 0, 0, 21, 23, 25, 0, 27, 29, 31, 33, 0, 35, 0, 0, 0, 37, 39, 41, 0, 0, 0, 0, 43, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 0, 8, 10, 12, 14, 16, 18, 20, 0, 0, 22, 24, 26, 0, 28, 30, 32, 34, 0, 36, 0, 0, 0, 38, 40, 42, 0, 0, 0, 0, 44, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![2, 0, 0, 0, 1, 1, 2, 0, 0, 1, 1, 0, 0, 0, 2, 1, 0, 2, 2, 0, 2, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![-27222, -83628, 88157, -24534, -16417, 27360, 15007, 99588, 88157, 20317, 36854, -2972, -17532, 54793, -55635, -16382, -25584, 209809, 209809, 10170, 306139, -26478, 75856, -3731, 13002, 25020, -36369, 155708, 418233, -24356, -1440, 9304, 31629, -290710, 53840, 2626, -18888, 432, -15912, 2432, -13787, 20854, -9253, -5433, 15254, -25119, 6621].span()
};
    let tree_8 = xgb_inference::Tree {
    base_weights: array![-6361, -30578, 2596, -49991, -18531, 25910, 142, -63150, -3687, 27585, -26265, -27640, 7079, -10134, -27071, 10489, -10049, -17130, 28248, -11931, -19865, -41301, 21778, 43803, 1587, 10469, -18052, -27308, 15945, -25739, -24661, 42399, -6448, -15793, 101688, 25134, -2484, -145, -16852, -14366, 12570, 4261, 15387, 22400, -20809, 3303, 39632, -13950, 1132].span(),
    left_children: array![1, 3, 5, 7, 9, 0, 11, 13, 15, 17, 19, 21, 23, 25, 0, 0, 0, 0, 0, 27, 0, 29, 31, 33, 35, 0, 0, 37, 0, 39, 0, 41, 0, 43, 45, 0, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 0, 12, 14, 16, 18, 20, 22, 24, 26, 0, 0, 0, 0, 0, 28, 0, 30, 32, 34, 36, 0, 0, 38, 0, 40, 0, 42, 0, 44, 46, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![2, 0, 2, 1, 0, 0, 1, 2, 1, 1, 1, 2, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![-44737, -3152, -44153, -13240, 6653, 25910, -11376, -60889, -11514, -15588, -15484, -10292, -12238, -19695, -27071, 10489, -10049, -17130, 28248, -16002, -19865, 50684, 42790, -7751, -10340, 10469, -18052, -54078, 15945, 31968, -24661, -12661, -6448, -20708, -27222, 25134, 7418, -145, -16852, -14366, 12570, 4261, 15387, 22400, -20809, 3303, 39632, -13950, 1132].span()
};
    let tree_9 = xgb_inference::Tree {
    base_weights: array![-4872, -43947, -677, -18117, -24356, 1454, -21806, -42285, 14231, -4166, 17003, -17645, -1913, -339, -62244, 23170, 8934, -53779, 4120, -25883, 1824, -28920, 14316, -21601, 2769, -514, 18403, 3706, -16368, 28874, 1196].span(),
    left_children: array![1, 3, 5, 7, 0, 9, 0, 11, 0, 13, 15, 0, 0, 17, 19, 0, 21, 23, 25, 0, 0, 27, 29, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 0, 10, 0, 12, 0, 14, 16, 0, 0, 18, 20, 0, 22, 24, 26, 0, 0, 28, 30, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![2, 2, 0, 2, 0, 1, 0, 0, 0, 1, 2, 0, 0, 0, 2, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![-55440, -60889, 104687, -64003, -24356, 6991, -21806, 12075, 14231, 4367, -8735, -17645, -1913, -86281, 139167, 23170, -283813, 70081, 2123, -25883, 1824, -291598, -84822, -21601, 2769, -514, 18403, 3706, -16368, 28874, 1196].span()
};
    let tree_10 = xgb_inference::Tree {
    base_weights: array![-4050, -59008, -1764, -22156, -1553, 98, -20920, -27342, 2153, 3452, -21429, 48378, -337, 35977, -11163, -10851, 107290, -55469, 4553, 26582, -6497, 41582, 8720, -9408, -22980, 30324, 610].span(),
    left_children: array![1, 3, 5, 0, 0, 7, 0, 9, 11, 13, 0, 15, 17, 19, 0, 0, 21, 23, 25, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 0, 0, 8, 0, 10, 12, 14, 0, 16, 18, 20, 0, 0, 22, 24, 26, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![1, 0, 0, 0, 0, 2, 0, 2, 2, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![-16658, 104687, 104687, -22156, -1553, -55440, -20920, -60889, -53883, -15692, -21429, 54793, -15623, -15297, -11163, -10851, -16417, 59762, -15484, 26582, -6497, 41582, 8720, -9408, -22980, 30324, 610].span()
};
    let tree_11 = xgb_inference::Tree {
    base_weights: array![-3364, -558, -41579, -64310, 2733, 13037, -68551, -23493, -1224, 335, 55517, -4808, 11846, -24234, -2924, 4193, -38156, 75652, 828, -441, 49285, -54925, 7312, 26982, 7290, 1294, -15395, 32778, 6666, -19167, -2944].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 0, 0, 15, 17, 0, 0, 0, 0, 19, 21, 23, 0, 25, 27, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 0, 0, 16, 18, 0, 0, 0, 0, 20, 22, 24, 0, 26, 28, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 1, 1, 0, 0, 2, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![88157, -16486, -16555, 60782, 82457, -56413, -4126, -23493, -1224, 62989, 80395, -4808, 11846, -24234, -2924, 51273, 14448, -14759, 828, 43103, -44542, 78515, 7312, 26982, 7290, 1294, -15395, 32778, 6666, -19167, -2944].span()
};
    let tree_12 = xgb_inference::Tree {
    base_weights: array![-2659, -1223, -19047, -29528, 704, 10031, -55411, 26382, -2494, -73923, 2304, -12985, 82463, -54997, 727, -2277, -28656, -18763, 14862, 33282, 1068, -74302, 3949, 32643, -3531, -17706, 14366, -2410, -27904, 16384, -9158, -9151, 1269].span(),
    left_children: array![1, 3, 0, 5, 7, 0, 9, 11, 13, 15, 0, 17, 19, 21, 23, 0, 0, 0, 25, 0, 0, 27, 0, 29, 31, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 0, 6, 8, 0, 10, 12, 14, 16, 0, 18, 20, 22, 24, 0, 0, 0, 26, 0, 0, 28, 0, 30, 32, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 0, 0, 0, 0, 0, 2, 2, 0, 2, 0, 0, 2, 1, 0, 0, 0, 0, 1, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![109676, -283384, -19047, -296859, -37673, 10031, 123209, 78644, -31531, -10292, 2304, -86281, 155708, 2123, -17202, -2277, -28656, -18763, -14967, 33282, 1068, -23330, 3949, 78644, -2281, -17706, 14366, -2410, -27904, 16384, -9158, -9151, 1269].span()
};
    let tree_13 = xgb_inference::Tree {
    base_weights: array![-2562, -33738, 17, -56808, 7916, 2643, -59660, -22648, -23202, 18940, 782, -21619, -3598, 7345, -18002, -863, 21160, -41776, 1904, -5058, -20592, -530, 7368].span(),
    left_children: array![1, 3, 5, 7, 0, 9, 11, 0, 13, 0, 15, 0, 0, 0, 0, 17, 0, 19, 21, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 0, 10, 12, 0, 14, 0, 16, 0, 0, 0, 0, 18, 0, 20, 22, 0, 0, 0, 0].span(),
    split_indices: array![1, 0, 0, 2, 0, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 1, 2, 0, 0, 0, 0].span(),
    split_conditions: array![-16417, 99588, 88157, -54857, 7916, -16313, -6301, -22648, -54078, 18940, 85242, -21619, -3598, 7345, -18002, -15761, 21160, -15899, 209809, -5058, -20592, -530, 7368].span()
};
    let tree_14 = xgb_inference::Tree {
    base_weights: array![-2275, -1080, -17384, -23630, 796, -2401, -19718, -24165, 2531, -16360, 17580, 16532, -54980, 33405, -79, 22359, -13278, -5619, 12256, -21932, -510, -3675, 23919, 2623, -38947, -19207, 10330, 11179, -18259, -124, 13968, -18547, 4943].span(),
    left_children: array![1, 3, 0, 5, 7, 9, 0, 11, 13, 0, 15, 17, 19, 21, 23, 0, 25, 0, 0, 0, 0, 27, 0, 29, 31, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 0, 6, 8, 10, 0, 12, 14, 0, 16, 18, 20, 22, 24, 0, 26, 0, 0, 0, 0, 28, 0, 30, 32, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![109676, -55440, -17384, -60889, -283384, -28772, -19718, -292036, -64327, -16360, -19695, -1295, 39271, 2503, 338444, 22359, 6201, -5619, 12256, -21932, -510, -3366, 23919, 246006, 46895, -19207, 10330, 11179, -18259, -124, 13968, -18547, 4943].span()
};
    let tree_15 = xgb_inference::Tree {
    base_weights: array![-2086, -46439, -558, -18428, -1663, 480, -15812, -10923, 3725, -33867, 19024, 28450, 1075, -5455, -61256, 69089, -11275, -22926, 3257, -13647, 10431, -2646, -29074, -2986, 31721, -14321, 9962, 19135, -221].span(),
    left_children: array![1, 3, 5, 0, 0, 7, 0, 9, 11, 13, 15, 0, 17, 19, 21, 23, 25, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 0, 0, 8, 0, 10, 12, 14, 16, 0, 18, 20, 22, 24, 26, 0, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![1, 0, 0, 0, 0, 0, 0, 1, 0, 2, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![-16658, 103533, 104687, -18428, -1663, -25395, -15812, 1881, -22922, -17687, 7509, 28450, -21599, -13758, -78942, -277235, 39271, -22926, -17202, -13647, 10431, -2646, -29074, -2986, 31721, -14321, 9962, 19135, -221].span()
};
    let tree_16 = xgb_inference::Tree {
    base_weights: array![-1850, -41831, -559, -17015, -1421, -25648, 974, 5863, -47391, 8247, -6158, -17486, -4694, -3091, 81183, -53408, 2828, -13501, 24524, -3752, 31222, -25229, -77792, 28118, -3975, 2338, -19000, 13714, -9632, -19116, 19787, -28327, -6582, 2482, -14504].span(),
    left_children: array![1, 3, 5, 0, 0, 7, 9, 0, 11, 13, 15, 0, 0, 17, 19, 21, 23, 25, 27, 0, 0, 29, 31, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 0, 0, 8, 10, 0, 12, 14, 16, 0, 0, 18, 20, 22, 24, 26, 28, 0, 0, 30, 32, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![-16658, 103533, -283813, -17015, -1421, -296859, 16146, 5863, 39271, 5763, 26254, -17486, -4694, 2503, -14173, -1951, 29641, -6301, -10484, -3752, 31222, 15007, 125155, 28118, 146172, 2338, -19000, 13714, -9632, -19116, 19787, -28327, -6582, 2482, -14504].span()
};
    let tree_17 = xgb_inference::Tree {
    base_weights: array![-1908, -11962, 3549, -20359, -7184, 56594, 1011, -1598, -47146, -4671, 30325, 2854, -16800, 14926, -6587, 5470, -22361, 18771, -2732, -17644, -2384, -11057, 70026, -31859, 6714, -2485, 8594, 3358, -17241, 23452, 5392, 1676, -17234, 21037, 451].span(),
    left_children: array![1, 3, 5, 0, 7, 9, 11, 13, 15, 0, 0, 17, 0, 0, 19, 0, 0, 21, 23, 0, 25, 27, 29, 31, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 0, 8, 10, 12, 14, 16, 0, 0, 18, 0, 0, 20, 0, 0, 22, 24, 0, 26, 28, 30, 32, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 2, 1, 0, 2, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![-27222, -83628, -24887, -20359, -36369, 31968, 88157, -37673, -18678, -4671, 30325, -6612, -16800, 14926, -28772, 5470, -22361, 13061, -363, -17644, -40650, 32543, 46339, -3366, 1122, -2485, 8594, 3358, -17241, 23452, 5392, 1676, -17234, 21037, 451].span()
};
    let tree_18 = xgb_inference::Tree {
    base_weights: array![-1589, -9839, 3581, -1486, -64781, 18450, 235, -9383, 22729, -24985, -27540, -17785, 3364, 312, -62150, 8957, -20620, 35704, -1763, -48870, 9054, -4773, -70279, -18336, 60966, -20170, 1217, -20517, -2571, 20959, 661, -24441, -5759, 7101, 25656, 11787, -1076].span(),
    left_children: array![1, 3, 5, 7, 9, 0, 11, 13, 0, 0, 15, 0, 17, 19, 21, 0, 0, 23, 25, 27, 29, 0, 31, 0, 33, 0, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 0, 12, 14, 0, 0, 16, 0, 18, 20, 22, 0, 0, 24, 26, 28, 30, 0, 32, 0, 34, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![-10789, -11756, -10168, -12239, -11376, 18450, -9167, -13344, 22729, -24985, -11065, -17785, -10292, -28772, -22766, 8957, -20620, -50770, -7372, -43375, -18678, -4773, 24802, -18336, -5403, -20170, -6301, -20517, -2571, 20959, 661, -24441, -5759, 7101, 25656, 11787, -1076].span()
};
    let tree_19 = xgb_inference::Tree {
    base_weights: array![-1788, -4160, 15200, -1513, -59509, 39023, -31887, -3847, 17631, -3514, -28556, 23311, 1700, -63754, 8027, -12455, 8168, -20526, 38284, -25364, -4589, -3162, -98588, -2467, 79139, -372, 23400, 62, -20016, -8521, -33261, 25605, -2597, 26670, 7289, 2915, -2911].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 0, 0, 0, 0, 17, 19, 0, 21, 23, 0, 25, 0, 0, 27, 29, 31, 33, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 0, 0, 0, 0, 18, 20, 0, 22, 24, 0, 26, 0, 0, 28, 30, 32, 34, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![2, 2, 1, 2, 1, 2, 1, 0, 0, 0, 0, 0, 2, 0, 0, 2, 2, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![209809, 167385, 36854, 144032, 10374, 285706, 53840, 26254, 17631, -3514, -28556, 23311, 316843, 31968, 8027, 103359, 96742, -20526, 27360, -25364, -4589, 23173, -23949, 28461, 66193, 11272, 23400, 62, -20016, -8521, -33261, 25605, -2597, 26670, 7289, 2915, -2911].span()
};
    let tree_20 = xgb_inference::Tree {
    base_weights: array![-1513, -10867, -429, 11208, -3437, -5359, 41424, -22282, -943, 14330, -57771, -11894, 72015, 41537, -2872, -24876, 34224, -1034, -22509, -3286, 95473, 22335, -1127, -41931, 1107, 5777, -18942, 25900, 1785, 40360, -164, -21695, 3074, 16762, -578].span(),
    left_children: array![1, 0, 3, 5, 7, 9, 11, 0, 13, 15, 17, 0, 19, 21, 23, 25, 27, 0, 0, 0, 29, 0, 0, 31, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 0, 4, 6, 8, 10, 12, 0, 14, 16, 18, 0, 20, 22, 24, 26, 28, 0, 0, 0, 30, 0, 0, 32, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![1, 0, 1, 1, 1, 2, 0, 0, 1, 0, 1, 0, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![-16658, -10867, -14552, -15519, -14034, -51548, -12964, -22282, -13724, 12075, -16106, -11894, -47267, -42402, -12239, -19695, 33729, -1034, -22509, -3286, 42790, 22335, -1127, 5763, -11756, 5777, -18942, 25900, 1785, 40360, -164, -21695, 3074, 16762, -578].span()
};
    let tree_21 = xgb_inference::Tree {
    base_weights: array![-1324, -6281, 5628, -4093, -18242, 53521, -864, -8195, 25690, 103894, -6615, -20915, 3086, -44438, -5563, 5425, 41772, 23459, -6396, -20300, 1565, -50, -44934, -48125, 49140, -31852, 11763, -1869, 10974, -5280, -23525, -1826, -21666, 36159, 4602, -16394, 13240, 12495, -7489].span(),
    left_children: array![1, 3, 5, 7, 0, 9, 11, 13, 0, 15, 0, 0, 17, 19, 21, 0, 0, 23, 25, 0, 0, 27, 29, 31, 33, 35, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 0, 10, 12, 14, 0, 16, 0, 0, 18, 20, 22, 0, 0, 24, 26, 0, 0, 28, 30, 32, 34, 36, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![2, 1, 1, 1, 0, 2, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 2, 2, 0, 0, 1, 2, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![28241, 85740, -3366, 14448, -18242, 46339, -2434, -83628, 25690, -11069, -6615, -20915, 3953, -8338, -5127, 5425, 41772, 53150, 144032, -20300, 1565, -8614, 10142, 41085, 73779, 35680, 29641, -1869, 10974, -5280, -23525, -1826, -21666, 36159, 4602, -16394, 13240, 12495, -7489].span()
};
    let tree_22 = xgb_inference::Tree {
    base_weights: array![-994, -19194, 493, 914, -18206, 28710, -1380, -24920, 28497, -22695, 23194, -43131, 2009, -934, -9701, 15817, -3251, -8138, -1765, -17074, -20688, 42973, -2115, -17603, 16703, -8933, 64416, -34991, 2461, 12515, -4297, 23672, -1167, -17974, -1172, 19346, -21].span(),
    left_children: array![1, 3, 5, 7, 0, 9, 11, 13, 15, 17, 0, 19, 21, 0, 0, 0, 0, 0, 0, 23, 0, 25, 27, 0, 29, 0, 31, 33, 35, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 0, 10, 12, 14, 16, 18, 0, 20, 22, 0, 0, 0, 0, 0, 0, 24, 0, 26, 28, 0, 30, 0, 32, 34, 36, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![2, 2, 2, 2, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![-55440, -60889, -53883, -65560, -18206, 70451, -15623, -16693, -16106, 53928, 23194, 59762, -14552, -934, -9701, 15817, -3251, -8138, -1765, 20846, -20688, -12964, -12239, -17603, -16209, -8933, 59336, 5763, -49797, 12515, -4297, 23672, -1167, -17974, -1172, 19346, -21].span()
};
    let tree_23 = xgb_inference::Tree {
    base_weights: array![-1133, 192, -22432, -37947, 2145, 18673, -51613, -19604, 1035, -192, 47303, -1306, 9768, -19052, -3231, 2017, -47090, 22313, -6207, 43309, 331, -18504, -4208, -5279, 23818, -13638, 609].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 0, 0, 15, 17, 0, 0, 0, 0, 19, 21, 0, 0, 23, 25, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 0, 0, 16, 18, 0, 0, 0, 0, 20, 22, 0, 0, 24, 26, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 1, 1, 0, 0, 2, 1, 0, 0, 0, 2, 0, 0, 0, 0, 1, 2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![88157, -16417, -16555, 54793, 82457, -55635, -8338, -19604, 1035, 69710, 120095, -1306, 9768, -19052, -3231, -16244, -24887, 22313, -6207, 10170, -15968, -18504, -4208, -5279, 23818, -13638, 609].span()
};
    let tree_24 = xgb_inference::Tree {
    base_weights: array![-1303, 1316, -12130, -2629, 56364, -21992, -3094, 1323, -36458, 75173, -1464, -18609, 19051, -2455, 26951, -7046, -61031, 7635, 31087, 14395, -62489, 54801, -13337, 1826, -75094, -50210, 19787, -29826, 3461, 39412, -12794, -22162, -7781, -922, 26175, -19469, 19586, -738, 13767, -28605, -3547, -20411, -1055, -5784, 21842, -8985, 2659, 15486, -4156].span(),
    left_children: array![1, 3, 5, 7, 9, 0, 11, 13, 15, 17, 0, 19, 21, 23, 0, 25, 27, 0, 0, 29, 31, 33, 35, 37, 39, 41, 0, 0, 0, 43, 45, 0, 0, 0, 0, 0, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 0, 12, 14, 16, 18, 0, 20, 22, 24, 0, 26, 28, 0, 0, 30, 32, 34, 36, 38, 40, 42, 0, 0, 0, 44, 46, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 0, 0, 0, 1, 0, 1, 0, 2, 2, 0, 2, 1, 0, 0, 2, 1, 0, 0, 0, 2, 2, 1, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![59762, 52885, 61962, 43103, 11272, -21992, -5403, 41338, 67746, 1580, -1464, -50964, 3953, 38406, 26951, 10921, 12894, 7635, 31087, 88157, -9318, 58210, 10374, 31968, 40171, -31698, 19787, -29826, 3461, 73985, 103533, -22162, -7781, -922, 26175, -19469, 79529, -738, 13767, -28605, -3547, -20411, -1055, -5784, 21842, -8985, 2659, 15486, -4156].span()
};
    let tree_25 = xgb_inference::Tree {
    base_weights: array![-1213, 4600, -7100, -3661, 61912, -45242, -329, 2852, -38414, -1327, 76140, -886, -51703, 54719, -4897, -1980, 31534, -24285, 2300, 30704, 31020, -20829, -22833, -4390, 28705, -22708, -371, 5408, -41558, 58045, -5200, 20694, -43469, 13115, 1233, 6718, -14781, 55967, -6324, -814, 9403, 4839, -17770, 3066, 24509, -19332, 419, 3614, 23960, -14762, -2].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 17, 0, 19, 0, 21, 23, 25, 27, 29, 0, 31, 0, 33, 0, 35, 0, 0, 0, 37, 39, 41, 43, 0, 0, 45, 0, 0, 0, 0, 47, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 18, 0, 20, 0, 22, 24, 26, 28, 30, 0, 32, 0, 34, 0, 36, 0, 0, 0, 38, 40, 42, 44, 0, 0, 46, 0, 0, 0, 0, 48, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 1, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 1, 2, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![16146, 5763, 26254, -5492, -14173, -49797, 29641, -11046, -2281, -1327, 8997, -886, 26684, -11376, 31968, -14702, -5127, -24285, -1380, 30704, -6819, -20829, 70081, -4390, 28705, -22708, 35614, -20708, -14656, -23330, -5200, 20694, -12170, 13115, 1233, 6718, -14781, -9615, 40171, -814, 9403, 4839, -17770, 3066, 24509, -19332, 419, 3614, 23960, -14762, -2].span()
};
    let tree_26 = xgb_inference::Tree {
    base_weights: array![-755, -2756, 16198, -496, -35528, 20260, -7035, -2305, 13303, 15126, -27257, -23964, 10213, -31354, -555, -7730, 12902, 10387, -55658, 4248, -16745, 28934, -4150, 13303, -12022, -26391, 671, -8807, 13856, -11, -8187].span(),
    left_children: array![1, 3, 5, 7, 9, 0, 11, 13, 0, 15, 0, 17, 0, 19, 21, 0, 0, 23, 25, 0, 0, 27, 29, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 0, 12, 14, 0, 16, 0, 18, 0, 20, 22, 0, 0, 24, 26, 0, 0, 28, 30, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![2, 2, 2, 2, 0, 0, 0, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![246006, 167385, 285706, 144032, 32543, 20260, 53928, -283384, 13303, 191905, -27257, 28845, 10213, -296859, -36237, -7730, 12902, 43103, 410059, 4248, -16745, -13758, 80395, 13303, -12022, -26391, 671, -8807, 13856, -11, -8187].span()
};
    let tree_27 = xgb_inference::Tree {
    base_weights: array![-795, -2790, 14239, -979, -15304, 51307, -4955, 10204, -4882, 2717, 22635, 9170, -27389, 1340, 50716, -46170, -784, -9243, 12231, -16972, 3213, 9332, -16587, 3807, 19495, -22696, 5673, 31250, -3548, 3946, -19889, -79, 20815, 25234, -7327, -13250, 382, 2130, -10929].span(),
    left_children: array![1, 3, 5, 7, 0, 9, 11, 13, 15, 0, 0, 17, 19, 21, 23, 25, 27, 29, 0, 0, 0, 31, 0, 0, 0, 0, 0, 33, 35, 0, 37, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 0, 10, 12, 14, 16, 0, 0, 18, 20, 22, 24, 26, 28, 30, 0, 0, 0, 32, 0, 0, 0, 0, 0, 34, 36, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![1, 1, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![27360, 20317, 36854, -17202, -15304, 10170, 306139, -20708, -12964, 2717, 22635, 39284, 410059, -22922, -11307, 500, -9308, 1580, 12231, -16972, 3213, -25395, -16587, 3807, 19495, -22696, 5673, -10547, -2281, 3946, -284275, -79, 20815, 25234, -7327, -13250, 382, 2130, -10929].span()
};
    let tree_28 = xgb_inference::Tree {
    base_weights: array![-436, -4988, 6048, 4371, -14225, 1781, 17884, -3944, 45292, 6941, -30820, 36579, -2288, -9712, 29304, -1187, 59709, -22463, 25071, -60163, -14578, -4165, 25097, -18201, 10081, -22335, -61, 16382, -4388, 27404, 4268, -18572, 6397, 21847, 7283, -4066, -68244, 14086, -26387, -2270, -22287, 37165, -4774, 2257, -18636, 6395, -5634, -7556, 16190, -23256, -6616, -14438, -2691, -13310, 7114, -610, 16044, -16183, 2208].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 0, 13, 15, 17, 19, 21, 23, 25, 27, 0, 29, 31, 33, 35, 37, 0, 0, 39, 41, 0, 43, 0, 0, 0, 0, 0, 45, 0, 47, 0, 49, 0, 51, 53, 0, 55, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 0, 14, 16, 18, 20, 22, 24, 26, 28, 0, 30, 32, 34, 36, 38, 0, 0, 40, 42, 0, 44, 0, 0, 0, 0, 0, 46, 0, 48, 0, 50, 0, 52, 54, 0, 56, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![2, 0, 4, 0, 1, 1, 0, 1, 1, 2, 2, 1, 0, 0, 2, 0, 1, 0, 2, 2, 2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 2, 0, 1, 1, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![28241, 16146, 493288, 5763, -14898, -6301, 17884, -1364, -14173, -54467, -27222, -7958, 195, -83628, -18854, -1187, -13378, 73985, -53883, -50964, -23914, -4165, 25097, -10484, 3953, -22335, -1380, 16382, -4388, 27404, 4268, -18572, -16555, 21847, -15657, -4066, -37536, 14086, -8718, 2503, -22287, 67746, 7509, 2257, -18636, 6395, -5634, -7556, 16190, -23256, -6616, -14438, -2691, -13310, 7114, -610, 16044, -16183, 2208].span()
};
    let tree_29 = xgb_inference::Tree {
    base_weights: array![-656, 2052, -11731, -1325, 46054, -19367, -4227, -17291, 615, 60964, -1425, 4064, -37233, 15298, -1214, 6064, 25734, -8762, 20185, -18888, -7, -14727, 1101, 2776, -35401, 7227, -980, -3123, 15520, -15707, -318].span(),
    left_children: array![1, 3, 5, 7, 9, 0, 11, 0, 13, 15, 0, 17, 19, 0, 21, 0, 0, 23, 0, 0, 0, 0, 25, 27, 29, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 0, 12, 0, 14, 16, 0, 18, 20, 0, 22, 0, 0, 24, 0, 0, 0, 0, 26, 28, 30, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 0, 0, 1, 1, 0, 2, 0, 1, 2, 0, 2, 1, 0, 1, 0, 0, 2, 0, 0, 0, 0, 1, 2, 2, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![59762, 52885, 61962, -16417, 11272, -19367, 129047, -17291, -16313, 1580, -1425, 78644, 19350, 15298, -15968, 6064, 25734, -8735, 20185, -18888, -7, -14727, -13724, -27222, 41085, 7227, -980, -3123, 15520, -15707, -318].span()
};
    let tree_30 = xgb_inference::Tree {
    base_weights: array![-590, -8695, 2519, -1227, -57239, 20605, 192, 6957, -45973, -20261, -5066, -27253, 3001, 1390, 14336, -21971, 2615, -42741, 1675, 15055, 613, 12788, -36304, -2060, -19213, 8649, -7957, 2738, -25616, -2738, 14654, -18153, -2329, -7516, 1496, -15305, 689].span(),
    left_children: array![1, 3, 5, 7, 9, 0, 11, 13, 15, 0, 0, 17, 19, 21, 0, 0, 0, 23, 25, 0, 27, 29, 31, 0, 0, 0, 0, 33, 35, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 0, 12, 14, 16, 0, 0, 18, 20, 22, 0, 0, 0, 24, 26, 0, 28, 30, 32, 0, 0, 0, 0, 34, 36, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![2, 2, 2, 1, 1, 0, 2, 2, 2, 0, 0, 1, 2, 2, 0, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![-40650, -44153, -40066, -11756, -13896, 20605, -27222, -44737, -50770, -20261, -5066, -11445, -24887, -50964, 14336, -21971, 2615, -13413, -35007, 15055, 79529, -16002, -48434, -2060, -19213, 8649, -7957, -283813, 78644, -2738, 14654, -18153, -2329, -7516, 1496, -15305, 689].span()
};
    let tree_31 = xgb_inference::Tree {
    base_weights: array![-1074, -5656, 3741, -1301, -23598, 29846, -3458, -5383, 36804, 51501, -22147, -20541, 915, -20256, -1378, -5360, 62965, -1722, 72338, 7518, -17254, -10158, 20820, 22812, -8562, 25596, 2137, 20961, 30787, -2123, -24695, 49862, -16077, 535, 20175, -21859, -673, 1194, 8589, -6649, 7672, 23347, 4582, -23102, 4585].span(),
    left_children: array![1, 3, 5, 7, 0, 9, 11, 13, 15, 17, 19, 0, 21, 0, 23, 0, 25, 0, 27, 0, 0, 29, 31, 33, 35, 0, 0, 37, 0, 39, 0, 41, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 0, 10, 12, 14, 16, 18, 20, 0, 22, 0, 24, 0, 26, 0, 28, 0, 0, 30, 32, 34, 36, 0, 0, 38, 0, 40, 0, 42, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![2, 2, 1, 1, 0, 0, 1, 0, 2, 0, 1, 0, 0, 0, 0, 0, 2, 0, 1, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 2, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![7418, 3136, -3366, -1364, -23598, 37977, -2434, -83628, -28001, -21599, -8062, -20541, 39284, -20256, -17657, -5360, -8735, -1722, -9374, 7518, -17254, 37219, 146172, -10789, -12964, 25596, 2137, -7553, 30787, 144032, -24695, 3953, 250871, 535, 20175, -21859, -673, 1194, 8589, -6649, 7672, 23347, 4582, -23102, 4585].span()
};
    let tree_32 = xgb_inference::Tree {
    base_weights: array![-1224, -8192, -397, 18865, -2777, -6344, 31936, -17899, -1113, 48305, 2356, 30815, -2574, 2170, 20342, 12749, -15765, 17595, -3797, -22880, 994, 7599, -10084, 15018, -406].span(),
    left_children: array![1, 0, 3, 5, 7, 0, 9, 0, 11, 13, 15, 17, 19, 0, 0, 0, 0, 0, 0, 21, 23, 0, 0, 0, 0].span(),
    right_children: array![2, 0, 4, 6, 8, 0, 10, 0, 12, 14, 16, 18, 20, 0, 0, 0, 0, 0, 0, 22, 24, 0, 0, 0, 0].span(),
    split_indices: array![1, 0, 1, 0, 1, 0, 2, 0, 1, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0].span(),
    split_conditions: array![-16658, -8192, -15899, 12075, -15761, -6344, -53883, -17899, -15484, 73985, 59762, -51548, -40650, 2170, 20342, 12749, -15765, 17595, -3797, -49267, -38510, 7599, -10084, 15018, -406].span()
};
    let tree_33 = xgb_inference::Tree {
    base_weights: array![-832, 1384, -11382, -1085, 39583, -16589, -2998, -16031, 564, 23104, -2210, 8625, -38922, 12316, -980, -9893, 35621, -20963, 1175, -15634, 611, 8533, -17065, 17961, 12905, 919, -4666, 8982, -3485, -8137, 12468].span(),
    left_children: array![1, 3, 5, 7, 9, 0, 11, 0, 13, 0, 0, 15, 17, 0, 19, 21, 23, 0, 0, 0, 25, 27, 0, 0, 29, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 0, 12, 0, 14, 0, 0, 16, 18, 0, 20, 22, 24, 0, 0, 0, 26, 28, 0, 0, 30, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 0, 0, 1, 1, 0, 2, 0, 1, 0, 0, 2, 2, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![62989, 55670, 66193, -16417, -12170, -16589, 122820, -16031, -16313, 23104, -2210, -28001, 250871, 12316, -16140, -51937, 68842, -20963, 1175, -15634, 43103, 88157, -17065, 17961, 41085, 919, -4666, 8982, -3485, -8137, 12468].span()
};
    let tree_34 = xgb_inference::Tree {
    base_weights: array![-1034, -18562, 33, 4624, -13635, 21339, -2515, -7938, 32986, -34502, 782, 45597, -6423, -49734, 414, 17890, -1313, 16035, 26494, -1199, -24218, -15120, 338, 13695, -13143, 11889, -464].span(),
    left_children: array![1, 3, 5, 0, 0, 7, 9, 0, 11, 13, 15, 17, 0, 19, 0, 0, 21, 23, 0, 0, 0, 0, 25, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 0, 0, 8, 10, 0, 12, 14, 16, 18, 0, 20, 0, 0, 22, 24, 0, 0, 0, 0, 26, 0, 0, 0, 0].span(),
    split_indices: array![0, 0, 0, 0, 0, 1, 0, 0, 2, 1, 0, 2, 0, 2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![-283384, -292036, -37673, 4624, -13635, -13758, -25395, -7938, 155708, 2123, -22922, 86428, -6423, -17687, 414, 17890, -20708, -3366, 26494, -1199, -24218, -15120, -18678, 13695, -13143, 11889, -464].span()
};
    let tree_35 = xgb_inference::Tree {
    base_weights: array![-861, -4986, 3471, -1454, -20619, 30669, -1656, -5056, 32829, 45003, -4682, 16304, -5511, -19117, -1400, -4800, 16645, 13974, 21121, -23565, 940, 27038, -4581, 10897, -4277, -3467, 15891, -4498, 14034, 1791, -6299, -4718, 1771].span(),
    left_children: array![1, 3, 5, 7, 0, 9, 11, 13, 15, 17, 0, 0, 19, 0, 21, 0, 0, 23, 0, 0, 25, 27, 29, 0, 0, 31, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 0, 10, 12, 14, 16, 18, 0, 0, 20, 0, 22, 0, 0, 24, 0, 0, 26, 28, 30, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![2, 2, 1, 1, 0, 0, 2, 0, 2, 1, 0, 0, 2, 0, 0, 0, 0, 1, 0, 0, 4, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![7418, 3136, -6301, -1364, -20619, 52439, 13061, -83628, -28001, -8614, -4682, 16304, 28241, -19117, -36237, -4800, 16645, -10340, 21121, -23565, 493288, -13827, -13344, 10897, -4277, 195, 15891, -4498, 14034, 1791, -6299, -4718, 1771].span()
};
    let tree_36 = xgb_inference::Tree {
    base_weights: array![-620, 4004, -5188, -2474, 45650, -39991, 997, -11274, 109, 21747, 18728, -12185, -19058, 16608, -2276, -5262, 10491, -8336, 17168, -45144, 13000, 836, -13264, 1975, -35454, 20707, -4425, -1033, -18997, -7475, 27451, -12356, 2029, -877, -15589, 14127, -5110, 416, -24597, 11819, -7314].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 0, 15, 0, 17, 19, 0, 0, 21, 23, 25, 0, 0, 27, 0, 29, 0, 31, 33, 0, 35, 0, 0, 37, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 0, 16, 0, 18, 20, 0, 0, 22, 24, 26, 0, 0, 28, 0, 30, 0, 32, 34, 0, 36, 0, 0, 38, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 2, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 2, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![16146, 5763, 26254, -63030, 8395, -1951, 28461, -11274, 2503, 21747, 11031, -9374, -19058, 16608, 418233, -1951, 4367, -8336, 17168, -15139, 13000, 10374, -13264, -86281, -42815, 20707, -8735, -1033, -18997, 3953, 49939, -12356, 2029, -877, -15589, 14127, -5110, 416, -24597, 11819, -7314].span()
};
    let tree_37 = xgb_inference::Tree {
    base_weights: array![-803, -8068, 3125, 583, -25132, 13280, 899, 31685, -6479, 7074, -40206, 3253, -28556, 434, 17941, 3622, -17161, -9143, 11703, -22440, -12294, -8902, 4997, -15373, -224, -9533, 49259, 14169, -13448, -27916, 7499, -17988, 403, 6090, 18528, -4091, 12403, -15174, 669, 15909, 1528].span(),
    left_children: array![1, 3, 5, 7, 9, 0, 11, 13, 15, 17, 19, 21, 23, 0, 0, 25, 0, 0, 0, 0, 27, 0, 29, 0, 0, 31, 33, 35, 0, 37, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 0, 12, 14, 16, 18, 20, 22, 24, 0, 0, 26, 0, 0, 0, 0, 28, 0, 30, 0, 0, 32, 34, 36, 0, 38, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![2, 1, 2, 0, 2, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![-27222, -13724, -24887, -18678, -49797, 13280, 79529, -47267, -44153, -54078, -40650, -21384, 78644, 434, 17941, -48434, -17161, -9143, 11703, -22440, -36369, -8902, -283813, -15373, -224, 6201, -44737, -11376, -13448, 49939, -277820, -17988, 403, 6090, 18528, -4091, 12403, -15174, 669, 15909, 1528].span()
};
    let tree_38 = xgb_inference::Tree {
    base_weights: array![-998, -4780, 4302, -19099, -1259, 29539, -5027, 1751, -51864, 42501, -5774, 61397, 9897, -14934, -730, 22890, -7920, -20325, -4136, 4461, 15476, -14664, -1761, -2416, 29828, -23591, 32986, -10471, 16355, -5840, 19352, 18491, -10785, -18674, 7977, 8286, 16547, -41937, 16866, 57235, -16330, -3382, 9884, -9721, -987, -3644, 8208, 11368, -22257, 17313, 900, 3098, 21799, -21402, 3844].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 0, 27, 29, 0, 0, 0, 0, 0, 0, 31, 0, 0, 33, 35, 37, 39, 0, 0, 41, 43, 0, 0, 45, 0, 47, 49, 51, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 0, 28, 30, 0, 0, 0, 0, 0, 0, 32, 0, 0, 34, 36, 38, 40, 0, 0, 42, 44, 0, 0, 46, 0, 48, 50, 52, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![2, 0, 2, 0, 0, 1, 2, 2, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 2, 0, 0, 2, 0, 0, 0, 2, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![28241, -23949, 73779, -36237, -17657, -3366, 78644, -21384, -29792, -37536, -12964, -11069, -708, -14934, 39284, -56290, -7920, -20325, -4136, 4461, 15476, -14664, 16146, -2416, 29828, 53150, 24802, 144032, 146172, -5840, 19352, -46294, 33267, -18674, 7977, 53150, 16547, -34486, 167385, 96742, 250871, -3382, 9884, -9721, -987, -3644, 8208, 11368, -22257, 17313, 900, 3098, 21799, -21402, 3844].span()
};
    let tree_39 = xgb_inference::Tree {
    base_weights: array![-616, 1525, -10685, -15485, 3126, -15265, -2964, 42120, 763, 7139, -10539, -2190, 26427, -9739, 2010, -8432, 30671, 17862, -215, 20715, -29995, 17544, 4916, -8446, 9563, -12233, 644, -3369, 12180, -11228, -3919, -7562, 10046].span(),
    left_children: array![1, 3, 5, 0, 7, 0, 9, 11, 13, 15, 0, 0, 0, 0, 17, 19, 21, 23, 25, 27, 29, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 0, 8, 0, 10, 12, 14, 16, 0, 0, 0, 0, 18, 20, 22, 24, 26, 28, 30, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 1, 0, 0, 1, 0, 2, 0, 1, 2, 0, 0, 0, 0, 1, 1, 2, 2, 1, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![62989, -16486, 66193, -15485, -16244, -15265, 122820, 33267, -15968, -28001, -10539, -2190, 26427, -9739, -14552, -16555, -8735, -52716, -13827, -55246, 85242, 17544, 3573, -8446, 9563, -12233, 644, -3369, 12180, -11228, -3919, -7562, 10046].span()
};
    let tree_40 = xgb_inference::Tree {
    base_weights: array![-840, -5631, 3102, 2148, -28009, 34409, -1062, -3723, 14223, -17696, -2243, 45681, -416, -17037, 2657, 1774, -11512, 14166, -37546, 2508, 17391, 38414, -1047, -8984, 6281, -18778, 4222, -5729, 20805, -13375, 1661, 16307, -12, 4889, -2251].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 0, 0, 17, 19, 0, 0, 21, 23, 0, 0, 25, 0, 0, 27, 29, 0, 31, 0, 0, 0, 0, 0, 33, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 0, 0, 18, 20, 0, 0, 22, 24, 0, 0, 26, 0, 0, 28, 30, 0, 32, 0, 0, 0, 0, 0, 34, 0, 0, 0, 0].span(),
    split_indices: array![1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0].span(),
    split_conditions: array![-8614, -11756, -6612, -12239, -10789, 29641, -5403, -13344, 14223, -17696, -10168, -31694, -416, -17037, -10292, -28772, -11512, 14166, -5788, 2508, 17391, -27222, -5232, -8984, -18678, -18778, 4222, -5729, 20805, -13375, 3953, 16307, -12, 4889, -2251].span()
};
    let tree_41 = xgb_inference::Tree {
    base_weights: array![-700, 432, -17933, -29421, 1974, 10009, -12878, -10346, -2379, 34431, -720, -984, 5367, 52578, -560, -13041, 1057, 415, 22596, -385, 12194, 367, -9950].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 0, 0, 0, 13, 15, 0, 0, 17, 0, 0, 19, 0, 0, 21, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 0, 0, 0, 14, 16, 0, 0, 18, 0, 0, 20, 0, 0, 22, 0, 0, 0].span(),
    split_indices: array![0, 1, 1, 2, 1, 1, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![88157, -16417, -16555, -54273, -15899, -16658, -12878, -10346, -2379, -52521, -15623, -984, 5367, 12075, -560, -13041, 83763, 415, 22596, 69710, 12194, 367, -9950].span()
};
    let tree_42 = xgb_inference::Tree {
    base_weights: array![-685, -4220, 4228, -2296, -10108, 40821, -651, -4732, 17690, 20335, -119, -5725, 17061, -1587, -18515, 29043, -2037, 4884, -37745, 17133, -3184, -6088, 17916, 15732, -712, -2695, 20405, -17443, -4964, 7901, -26663, 216, -9716, -8895, 8929, -6383, 6108, -10456, 7114, -14535, 1848].span(),
    left_children: array![1, 3, 5, 7, 0, 9, 11, 13, 15, 0, 0, 17, 19, 21, 0, 23, 0, 25, 27, 0, 29, 31, 33, 0, 0, 35, 0, 0, 37, 0, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 0, 10, 12, 14, 16, 0, 0, 18, 20, 22, 0, 24, 0, 26, 28, 0, 30, 32, 34, 0, 0, 36, 0, 0, 38, 0, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![2, 2, 2, 2, 0, 1, 0, 2, 0, 0, 0, 0, 0, 1, 0, 2, 0, 0, 1, 0, 2, 1, 2, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![28241, 21819, 41085, 7418, -10108, -3366, 52885, 3136, 37977, 20335, -119, 37219, 57435, -8338, -18515, 13061, -2037, 31519, 12894, 17133, 122820, -11756, -40650, 15732, -712, 144032, 20405, -17443, 42066, 7901, 250871, 216, -9716, -8895, 8929, -6383, 6108, -10456, 7114, -14535, 1848].span()
};
    let tree_43 = xgb_inference::Tree {
    base_weights: array![-456, -19081, 643, 5991, -11216, 12330, -471, 722, -20161, -1226, 33518, 4204, -14960, 622, -13649, -2573, 19185, -350, 9282].span(),
    left_children: array![1, 3, 5, 0, 0, 0, 7, 9, 11, 13, 15, 0, 0, 17, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 0, 0, 0, 8, 10, 12, 14, 16, 0, 0, 18, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0].span(),
    split_conditions: array![-283384, -296859, -277820, 5991, -11216, 12330, 39271, 27360, 306139, 20317, 10170, 4204, -14960, 246006, -13649, -2573, 19185, -350, 9282].span()
};
    let tree_44 = xgb_inference::Tree {
    base_weights: array![-214, 3967, -4314, -1706, 39407, -15376, -1464, 2694, -26612, 18026, 16439, 9316, -3395, -1344, 24446, -17985, 6055, -6524, 14173, -41687, 432, 3412, -28219, 16700, -4412, 11728, -8190, -16873, -3339, 15365, -2783, -1711, 6607, -13770, -968, -9604, 9244, 84, -12658].span(),
    left_children: array![1, 3, 5, 7, 9, 0, 11, 13, 15, 0, 17, 0, 19, 21, 23, 0, 25, 0, 0, 27, 29, 31, 33, 0, 35, 0, 0, 0, 0, 0, 37, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 0, 12, 14, 16, 0, 18, 0, 20, 22, 24, 0, 26, 0, 0, 28, 30, 32, 34, 0, 36, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![16146, 5763, 19680, -5492, 8395, -15376, 21561, -11046, -2281, 18026, 11031, 9316, 26254, -14702, -9308, -17985, -682, -6524, 14173, -4437, 28461, -25395, -12964, 16700, -7250, 11728, -8190, -16873, -3339, 15365, 418233, -1711, 6607, -13770, -968, -9604, 9244, 84, -12658].span()
};
    let tree_45 = xgb_inference::Tree {
    base_weights: array![-305, -4933, 4537, -1941, -13031, 15338, -5054, -3915, 7802, 4617, 18126, -26014, 10162, -9344, 10488, 21669, -13299, -45604, 11053, 17543, -10644, -5410, -14976, 15603, -867, 31809, -5785, -17709, 14248, 2954, -74378, -7969, 13959, -14787, 31525, -2583, 9844, -3025, 9704, -1243, 12927, 15806, -4143, -4363, -27158, 7513, -11832, 15425, -7765].span(),
    left_children: array![1, 3, 5, 7, 0, 9, 11, 13, 0, 15, 0, 17, 19, 21, 23, 25, 27, 29, 31, 33, 0, 35, 0, 0, 37, 39, 0, 0, 41, 0, 43, 0, 0, 45, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 0, 10, 12, 14, 0, 16, 0, 18, 20, 22, 24, 26, 28, 30, 32, 34, 0, 36, 0, 0, 38, 40, 0, 0, 42, 0, 44, 0, 0, 46, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![2, 2, 1, 2, 0, 1, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![7418, -172, 3953, -7372, -13031, 2503, 144032, 55670, 7802, -3366, 18126, 41338, 69710, 46599, 59762, 52439, 53150, -25973, 13654, -25395, -10644, 42066, -14976, 15603, -10927, -21599, -5785, -17709, 73779, 2954, 81758, -7969, 13959, -277820, 39271, -2583, 9844, -3025, 9704, -1243, 12927, 15806, -4143, -4363, -27158, 7513, -11832, 15425, -7765].span()
};
    let tree_46 = xgb_inference::Tree {
    base_weights: array![-359, 4214, -4611, -557, 39556, -26324, -362, -6708, 11888, 14858, 5428, -5879, -14711, 13094, -3170, 10968, -13879, 41246, -6843, -31921, 10284, -11488, 18, -7892, 25994, -19735, -5313, 18403, 845, -23521, 8708, -1721, -12508, 36860, -5703, -6145, 12404, 11287, -4615, -14652, 4662, 863, 18468, -12886, 23].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 17, 0, 0, 19, 0, 0, 21, 23, 25, 27, 29, 31, 0, 0, 33, 0, 35, 0, 37, 0, 0, 39, 0, 0, 0, 41, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 18, 0, 0, 20, 0, 0, 22, 24, 26, 28, 30, 32, 0, 0, 34, 0, 36, 0, 38, 0, 0, 40, 0, 0, 0, 42, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![13082, 5763, 26254, 2503, 8395, -1951, 28461, -36237, 10374, 14858, 5428, -5232, -14711, 13094, 31968, -86281, -29792, -25973, -16627, -50770, 10284, -11488, 37219, -7892, -13827, -19735, -22922, 18403, 845, 39271, 8708, -1721, -12508, -9615, 41338, -6145, 12404, 11287, -4615, -14652, 4662, 863, 18468, -12886, 23].span()
};
    let tree_47 = xgb_inference::Tree {
    base_weights: array![-147, -17812, 861, 5748, -10905, 16794, -1163, -10998, 28809, -8739, 462, 2707, -7803, 39794, -2224, -1416, 17495, 13636, 18717, 24650, -3513, 16552, -9227, 15570, -6989, 239, 14165, -13323, -556, 4143, -8109].span(),
    left_children: array![1, 3, 5, 0, 0, 7, 9, 11, 13, 0, 15, 0, 0, 17, 0, 19, 21, 23, 0, 25, 27, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 0, 0, 8, 10, 12, 14, 0, 16, 0, 0, 18, 0, 20, 22, 24, 0, 26, 28, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 0, 0, 0, 0, 1, 0, 2, 2, 0, 1, 0, 0, 2, 0, 0, 1, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![-283813, -296859, -37673, 5748, -10905, -10789, -31531, -42985, 155708, -8739, 27360, 2707, -7803, 86428, -2224, -22922, 36854, -7095, 18717, -25395, -20708, 16552, 306139, 15570, -6989, 239, 14165, -13323, -556, 4143, -8109].span()
};
    let tree_48 = xgb_inference::Tree {
    base_weights: array![165, -765, 18171, 882, -28010, 16882, -5588, -1136, 14851, -18128, 3050, 933, -31943, 4779, -3336, -766, 12374, 448, -19381, 738, -5045, -4237, 4432].span(),
    left_children: array![1, 3, 5, 7, 9, 0, 0, 11, 0, 0, 13, 15, 17, 0, 0, 19, 0, 21, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 0, 0, 12, 0, 0, 14, 16, 18, 0, 0, 20, 0, 22, 0, 0, 0, 0, 0].span(),
    split_indices: array![2, 2, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![410059, 285706, 22761, 246006, -19266, 16882, -5588, 167385, 14851, -18128, 48953, 144032, 32543, 4779, -3336, 3953, 12374, -12063, -19381, 738, -5045, -4237, 4432].span()
};
    let tree_49 = xgb_inference::Tree {
    base_weights: array![88, -1413, 11380, 734, -31764, 22043, -5048, -3684, 10987, -16881, 1098, 18140, 4832, 293, -19725, 17054, 5118, -14018, 12250, -4035, 37216, 17522, -36365, -24244, 11131, 2880, -28448, -102, -12562, 14836, 2442, -2179, 10364, -754, -21559, -12520, 769, 12196, -332, -10252, -2530].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 0, 13, 15, 0, 0, 0, 17, 19, 21, 0, 23, 25, 0, 27, 29, 31, 33, 35, 37, 0, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 0, 14, 16, 0, 0, 0, 18, 20, 22, 0, 24, 26, 0, 28, 30, 32, 34, 36, 38, 0, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![1, 1, 1, 2, 0, 2, 0, 1, 2, 0, 0, 0, 2, 1, 2, 0, 0, 1, 0, 1, 1, 1, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![27360, 18384, 64025, 35830, 31519, 122820, -5048, -6612, 41085, -16881, 1098, 18140, 410059, -8614, -12238, 17054, -82754, 36854, 12250, -9822, -7958, -1364, 37977, 86428, -15297, 2880, 44001, -102, -12562, 14836, 2442, -2179, 10364, -754, -21559, -12520, 769, 12196, -332, -10252, -2530].span()
};
    let tree_50 = xgb_inference::Tree {
    base_weights: array![131, -5199, 3130, 2377, -21176, 11718, 979, 27710, -3627, 7369, -35403, 2930, -23123, 1023, 13990, 4415, -14377, 11120, -7426, -19944, -10176, -181, 16299, 210, -11842, -6472, 12499, 8388, -29905, 2809, -26767, 272, 32969, 908, -16319, -13851, 961, -359, 5545, -13994, 3036, 5317, -5483, 14009, 3456].span(),
    left_children: array![1, 3, 5, 7, 9, 0, 11, 13, 15, 17, 19, 21, 23, 0, 0, 25, 0, 0, 0, 0, 27, 29, 31, 0, 0, 33, 0, 0, 35, 37, 39, 41, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 0, 12, 14, 16, 18, 20, 22, 24, 0, 0, 26, 0, 0, 0, 0, 28, 30, 32, 0, 0, 34, 0, 0, 36, 38, 40, 42, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![2, 1, 2, 0, 2, 0, 0, 2, 2, 1, 2, 1, 1, 0, 0, 2, 0, 0, 0, 0, 2, 1, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![-27222, -13724, -24887, -18678, -49797, 11718, 79529, -47267, -44153, -11756, -40650, 27360, 11272, 1023, 13990, -48434, -14377, 11120, -7426, -19944, -38510, 17072, 20255, 210, -11842, -51548, 12499, 8388, 5763, 125155, 31519, -277820, 39271, 908, -16319, -13851, 961, -359, 5545, -13994, 3036, 5317, -5483, 14009, 3456].span()
};
    let tree_51 = xgb_inference::Tree {
    base_weights: array![-154, -6052, 2278, -1254, -12853, 13407, -43, 3445, -9775, -10880, 1668, -1088, 10653, 9648, 210, -6050, 11628, -11337, 2220, 934, -10531, 14373, -4].span(),
    left_children: array![1, 3, 5, 7, 0, 0, 9, 11, 0, 0, 13, 15, 0, 0, 17, 19, 0, 0, 21, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 0, 0, 10, 12, 0, 0, 14, 16, 0, 0, 18, 20, 0, 0, 22, 0, 0, 0, 0].span(),
    split_indices: array![2, 2, 1, 1, 0, 0, 1, 1, 0, 0, 1, 2, 0, 0, 1, 1, 0, 0, 2, 0, 0, 0, 0].span(),
    split_conditions: array![-40650, -44153, -14552, -11756, -12853, 13407, -13827, -13240, -9775, -10880, -13344, -44737, 10653, 9648, -12239, -15484, 11628, -11337, -37147, 934, -10531, 14373, -4].span()
};
    let tree_52 = xgb_inference::Tree {
    base_weights: array![-76, -13344, 1082, -34487, 6199, 12544, -329, -2339, -12311, 895, -10088, -814, 14677, 1025, -30509, -357, 5217, -18112, 2460].span(),
    left_children: array![1, 3, 5, 7, 0, 0, 9, 0, 0, 11, 0, 13, 0, 15, 17, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 0, 0, 10, 0, 0, 12, 0, 14, 0, 16, 18, 0, 0, 0, 0].span(),
    split_indices: array![1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0].span(),
    split_conditions: array![-16417, 99588, -16382, 57435, 6199, 12544, 88157, -2339, -12311, 85242, -10088, 69710, 14677, 246006, 6055, -357, 5217, -18112, 2460].span()
};
    let tree_53 = xgb_inference::Tree {
    base_weights: array![-143, -6205, 573, 9297, -352, 1952, -13174, -131, 30083, -29510, 5031, -11621, 3303, 15008, -1011, -16835, -10330, 25713, -7237, -403, -18079, 14540, 178, 6841, -10619, 11331, 1639].span(),
    left_children: array![1, 0, 3, 0, 5, 7, 9, 11, 13, 15, 17, 19, 21, 0, 0, 0, 23, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 0, 4, 0, 6, 8, 10, 12, 14, 16, 18, 20, 22, 0, 0, 0, 24, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![1, 0, 1, 0, 0, 0, 0, 2, 1, 2, 0, 0, 1, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![-16658, -6205, -16624, 9297, 62989, 55670, 82457, -40650, -12170, -23914, 88157, 33729, -14552, 15008, -1011, -16835, 44198, -51937, -7237, -403, -18079, 14540, 178, 6841, -10619, 11331, 1639].span()
};
    let tree_54 = xgb_inference::Tree {
    base_weights: array![-193, 18379, -1008, -788, 9078, -25781, 376, 1531, -16015, 18497, -573, 8732, 192, -29290, 1584, 2735, -15091, 13242, -520, -8364, 212].span(),
    left_children: array![1, 3, 5, 0, 0, 7, 9, 0, 0, 11, 13, 0, 0, 15, 17, 0, 0, 0, 19, 0, 0].span(),
    right_children: array![2, 4, 6, 0, 0, 8, 10, 0, 0, 12, 14, 0, 0, 16, 18, 0, 0, 0, 20, 0, 0].span(),
    split_indices: array![2, 2, 2, 0, 0, 0, 2, 0, 0, 1, 1, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0].span(),
    split_conditions: array![-65171, -66533, -55440, -788, 9078, 6653, -54662, 1531, -16015, -16417, -16278, 8732, 192, 56275, -51937, 2735, -15091, 13242, -15623, -8364, 212].span()
};
    let tree_55 = xgb_inference::Tree {
    base_weights: array![-263, -14919, 618, 3716, -10272, 6561, -405, 2396, -8245, -2416, 33178, -12185, -662, 866, -14273, -757, 47500, -12982, 9257, -494, 13670, 22044, -1150, 16718, -98].span(),
    left_children: array![1, 3, 5, 0, 0, 0, 7, 9, 11, 13, 15, 0, 17, 19, 0, 0, 21, 0, 23, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 0, 0, 0, 8, 10, 12, 14, 16, 0, 18, 20, 0, 0, 22, 0, 24, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 0, 0, 1, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![-283384, -292036, -84822, 3716, -10272, 6561, 3953, -363, 6991, -1744, 53150, -12185, -21599, -2745, -14273, -757, 108224, -12982, -12063, -494, 13670, 22044, -1150, 16718, -98].span()
};
    let tree_56 = xgb_inference::Tree {
    base_weights: array![-46, 15670, -754, -590, 7553, 236, -8749, -1200, 9635, 179, -21734, -14684, 2261, 3956, -37301, -8300, 7439, 9430, 15, -14044, -2956].span(),
    left_children: array![1, 3, 5, 0, 0, 7, 0, 9, 0, 11, 13, 15, 17, 0, 19, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 0, 0, 8, 0, 10, 0, 12, 14, 16, 18, 0, 20, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![2, 2, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 2, 0, 2, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![-65171, -66533, 102363, -590, 7553, 87446, -8749, 79529, 9635, -51743, -15968, -13827, -48045, 3956, 78644, -8300, 7439, 9430, 15, -14044, -2956].span()
};
    let tree_57 = xgb_inference::Tree {
    base_weights: array![-32, 8373, -1437, -4026, 30050, -11582, 188, -12448, 12793, 15834, -3636, -9535, 1521, 27127, -6440, 11619, 12, 15605, 1951, 1190, -16072, -7911, 9177, -69, 4718, 502, -9808].span(),
    left_children: array![1, 3, 5, 7, 9, 0, 11, 0, 13, 0, 0, 0, 15, 17, 0, 0, 19, 0, 21, 23, 25, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 0, 12, 0, 14, 0, 0, 0, 16, 18, 0, 0, 20, 0, 22, 24, 26, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![1, 1, 1, 0, 2, 0, 2, 0, 2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![-15899, -16348, -15623, 33267, -52521, -11582, -55246, -12448, -54078, 15834, -3636, -9535, -15484, 83195, -6440, 11619, 79529, 15605, 103533, 61962, 11272, -7911, 9177, -69, 4718, 502, -9808].span()
};
    let tree_58 = xgb_inference::Tree {
    base_weights: array![-153, -3235, 3094, -511, -11347, 13633, -3633, -3602, 14354, 25855, -276, -13456, 644, -16440, 116, -6087, 28855, -3127, 35395, -32355, 21144, -6680, 23401, 7279, -15036, 45418, -2284, 12615, 18854, -17629, 2778, -1434, 12305, -25016, 2556, 13716, -3813, -704, 6576, 7119, -8734, 4895, 16302, 8784, -6075, 3350, -4123, -676, -18678, 7357, -2780, -8485, 6121].span(),
    left_children: array![1, 3, 5, 7, 0, 9, 11, 13, 15, 17, 19, 0, 21, 0, 23, 0, 25, 0, 27, 29, 31, 33, 35, 37, 39, 41, 0, 43, 0, 0, 0, 45, 0, 47, 49, 0, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 0, 10, 12, 14, 16, 18, 20, 0, 22, 0, 24, 0, 26, 0, 28, 30, 32, 34, 36, 38, 40, 42, 0, 44, 0, 0, 0, 46, 0, 48, 50, 0, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![2, 2, 2, 1, 0, 1, 2, 0, 2, 0, 1, 0, 0, 0, 1, 0, 2, 0, 2, 2, 0, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![7418, -172, 73779, -8338, -11347, -3366, 78644, -56290, -27222, -22766, -363, -13456, 52885, -16440, -13344, -6087, -10292, -3127, 28241, 53150, 24802, 123209, 67540, -48434, -22922, -17687, -2284, 37977, 18854, -17629, 2778, -25973, 12305, 103359, 167385, 13716, 80569, -704, 6576, 7119, -8734, 4895, 16302, 8784, -6075, 3350, -4123, -676, -18678, 7357, -2780, -8485, 6121].span()
};
    let tree_59 = xgb_inference::Tree {
    base_weights: array![-357, 12363, -1281, 29315, -5413, -10320, -30, 13395, 997, 16116, -1435, 8845, -1258, -10438, 2528, -1987, -44376, 13059, -20, -10018, 2945, -20366, -1331, -11721, 830].span(),
    left_children: array![1, 3, 5, 7, 0, 0, 9, 0, 0, 11, 13, 0, 0, 15, 17, 19, 21, 0, 23, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 0, 0, 10, 0, 0, 12, 14, 0, 0, 16, 18, 20, 22, 0, 24, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![2, 0, 2, 1, 0, 0, 2, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![-60889, 13082, -55246, -16106, -5413, -10320, -53300, 13395, 997, -16451, -10789, 8845, -1258, -11859, -10340, -12964, -11376, 13059, -9167, -10018, 2945, -20366, -1331, -11721, 830].span()
};
    let tree_60 = xgb_inference::Tree {
    base_weights: array![-613, -14800, 196, 2977, -10009, 9247, -754, 2163, -7300, -30, 12417, -12713, -2554, -2523, 23838, -9513, 19828, 413, -16693, 15436, -2283, 4227, -5350, 13002, -1207].span(),
    left_children: array![1, 3, 5, 0, 0, 0, 7, 9, 11, 13, 0, 0, 15, 17, 19, 21, 23, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 0, 0, 0, 8, 10, 12, 14, 0, 0, 16, 18, 20, 22, 24, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 0, 0, 0, 0, 0, 2, 2, 2, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![-283813, -292036, -277820, 2977, -10009, 9247, 70081, 58210, 78644, 2226, 12417, -12713, 53928, -1951, 12075, 3573, 67540, 413, -16693, 15436, -2283, 4227, -5350, 13002, -1207].span()
};
    let tree_61 = xgb_inference::Tree {
    base_weights: array![-310, -1686, 9957, -657, -7834, 19120, -4501, 8216, -3623, 3852, 29904, 2275, 9309, -28143, -372, 6152, -5143, 12932, 2302, -9509, 17804, -13512, -1653, 12612, -2808, 3200, -10528, 13555, 179, 8115, -9017, -10248, 254].span(),
    left_children: array![1, 3, 5, 7, 0, 9, 0, 11, 13, 15, 17, 19, 0, 21, 23, 0, 0, 0, 0, 25, 27, 0, 29, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 0, 10, 0, 12, 14, 16, 18, 20, 0, 22, 24, 0, 0, 0, 0, 26, 28, 0, 30, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![1, 1, 1, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 2, 0, 0, 0, 0, 0, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![27360, 20317, 64025, -17657, -7834, 20255, -4501, -21599, -11046, 285706, 39271, -4126, 9309, 15786, -9308, 6152, -5143, 12932, 2302, -17687, 51010, -13512, 62881, 12612, -2281, 3200, -10528, 13555, 179, 8115, -9017, -10248, 254].span()
};
    let tree_62 = xgb_inference::Tree {
    base_weights: array![-136, 3897, -3846, -2040, 28823, -31736, -911, 3406, -17170, 1098, 16410, -11590, -3455, 2810, -15984, -348, 28261, 12720, -26258, -3636, 14453, -14212, 6413, 3682, -13012, 11723, 1557, 2155, -14093, 2069, -27432, -14989, 9167, -187, 8763, -742, 14053, -12363, 777, 4199, -11145].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 0, 17, 0, 0, 0, 19, 21, 23, 25, 0, 27, 29, 0, 0, 31, 33, 0, 0, 0, 0, 0, 35, 37, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 0, 18, 0, 0, 0, 20, 22, 24, 26, 0, 28, 30, 0, 0, 32, 34, 0, 0, 0, 0, 0, 36, 38, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 2, 0, 2, 0, 2, 2, 0, 0, 2, 0, 0, 0, 2, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![13082, 144032, 20846, 103359, -25395, -5232, 146172, 5763, -17170, 167385, 16410, -11590, -3455, 96742, 272472, -1380, 8395, 12720, -64327, 44198, 14453, -14212, 53928, -6376, -13012, 11723, 1557, 2155, -14093, 28241, 7509, 44708, 9167, -187, 8763, -742, 14053, -12363, 777, 4199, -11145].span()
};
    let tree_63 = xgb_inference::Tree {
    base_weights: array![-151, -15086, 696, 2232, -9477, 15475, -1207, -3601, 27930, 200, -20143, 36784, -573, -2136, 32545, -10081, 2368, 2120, 15516, 1484, -17582, 14907, 572, -611, 6466, -10888, 889].span(),
    left_children: array![1, 3, 5, 0, 0, 7, 9, 0, 11, 13, 15, 17, 0, 19, 21, 0, 0, 0, 0, 23, 25, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 0, 0, 8, 10, 0, 12, 14, 16, 18, 0, 20, 22, 0, 0, 0, 0, 24, 26, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 0, 0, 0, 0, 1, 2, 0, 2, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![-283813, -292036, -37673, 2232, -9477, -10789, 338444, -3601, 155708, 246006, 46895, -85829, -573, 80395, 43103, -10081, 2368, 2120, 15516, -363, 31519, 14907, 572, -611, 6466, -10888, 889].span()
};
    let tree_64 = xgb_inference::Tree {
    base_weights: array![37, 2845, -4947, -1483, 23521, -14217, 488, 4295, -36534, -293, 35419, 15839, -5225, -112, 39771, -768, -54407, 6115, -5310, 15280, -3898, 793, -26404, -3156, 10821, 18110, 39, -1939, -21494, -6048, 13716, -15229, -5107, -1994, 8001, -6244, 2741, 4545, -8523].span(),
    left_children: array![1, 3, 5, 7, 9, 0, 11, 13, 15, 17, 19, 0, 21, 23, 25, 0, 27, 0, 0, 0, 0, 29, 31, 33, 0, 0, 0, 0, 0, 35, 0, 0, 37, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 0, 12, 14, 16, 18, 20, 0, 22, 24, 26, 0, 28, 0, 0, 0, 0, 30, 32, 34, 0, 0, 0, 0, 0, 36, 0, 0, 38, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 2, 0, 2, 0, 0, 0, 2, 1, 0, 1, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![37977, 144032, 41338, 80395, -31531, -14217, 43103, 53150, 3573, -277820, 36854, 15839, 146172, 35182, 1122, -768, -22922, 6115, -5310, 15280, -3898, 96742, 52885, 2986, 10821, 18110, 39, -1939, -21494, 67540, 13716, -15229, 69710, -1994, 8001, -6244, 2741, 4545, -8523].span()
};
    let tree_65 = xgb_inference::Tree {
    base_weights: array![235, -15229, 1112, -9180, 1371, -472, 16096, 3954, -6800, 9690, 1400, -548, 31543, -9801, 5905, 6268, -5004, 3795, -14521, 13570, -3090, -969, -25013, -166, 10537, 9100, -9186, -3285, 13855, -14706, -2589].span(),
    left_children: array![1, 3, 5, 0, 0, 7, 9, 11, 13, 0, 15, 17, 19, 21, 0, 0, 0, 23, 25, 0, 0, 27, 29, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 0, 0, 8, 10, 12, 14, 0, 16, 18, 20, 22, 0, 0, 0, 24, 26, 0, 0, 28, 30, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![-283813, 39271, 27360, -9180, 1371, -6301, 36854, -8614, 81586, 9690, 306139, -11756, 47636, 37977, 5905, 6268, -5004, -12239, -22922, 13570, -3090, 31968, -708, -166, 10537, 9100, -9186, -3285, 13855, -14706, -2589].span()
};
    let tree_66 = xgb_inference::Tree {
    base_weights: array![504, -393, 16940, 947, -22437, 10911, -2832, -579, 11293, 271, -11687, 1160, -26595, -133, 9248, -10976, -2212, 828, -5159].span(),
    left_children: array![1, 3, 5, 7, 9, 0, 0, 11, 0, 0, 0, 13, 15, 17, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 0, 0, 12, 0, 0, 0, 14, 16, 18, 0, 0, 0, 0, 0].span(),
    split_indices: array![2, 2, 0, 2, 1, 0, 0, 2, 0, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0].span(),
    split_conditions: array![410059, 285706, 31968, 246006, 28845, 10911, -2832, 167385, 11293, 271, -11687, 144032, -3451, 4367, 9248, -10976, -2212, 828, -5159].span()
};
    let tree_67 = xgb_inference::Tree {
    base_weights: array![350, 1323, -13181, -6294, 2553, 2809, -11037, 12961, 1016, -103, 8700, 1499, -27838, -124, 4813, -12448, -431].span(),
    left_children: array![1, 3, 5, 0, 7, 0, 0, 0, 9, 11, 0, 13, 15, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 0, 8, 0, 0, 0, 10, 12, 0, 14, 16, 0, 0, 0, 0].span(),
    split_indices: array![0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0].span(),
    split_conditions: array![88157, -16417, -16555, -6294, -16382, 2809, -11037, 12961, 85242, 69710, 8700, 246006, 81586, -124, 4813, -12448, -431].span()
};
    let tree_68 = xgb_inference::Tree {
    base_weights: array![204, -5146, 839, 8007, -43, 2425, -13891, 501, 26800, -21113, 3029, -19679, 2394, 13256, -1384, -4962, -41384, 4913, -12604, 8325, -3, -7156, 11575, -15068, -3385].span(),
    left_children: array![1, 0, 3, 0, 5, 7, 9, 11, 13, 15, 0, 17, 19, 0, 0, 21, 23, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 0, 4, 0, 6, 8, 10, 12, 14, 16, 0, 18, 20, 0, 0, 22, 24, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![1, 0, 1, 0, 0, 0, 1, 1, 1, 2, 0, 2, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![-16658, -5146, -16624, 8007, 62989, 55670, 10374, -15968, -12170, -8735, 3029, -60889, -51548, 13256, -1384, -12170, 78515, 4913, -12604, 8325, -3, -7156, 11575, -15068, -3385].span()
};
    let tree_69 = xgb_inference::Tree {
    base_weights: array![148, -3153, 3839, -684, -10449, 18889, -988, -3138, 20895, 28042, -2887, -8501, 2419, 4125, -12957, -3879, 12578, 36860, -1926, 22761, -1964, 15773, -4776, -20293, 6465, 10854, 19107, -1162, 14265, -8841, 2568, -836, 10887, 3784, -5827, 3773, -8856, 11440, -5346, 2837, -3353, 7596, -3323].span(),
    left_children: array![1, 3, 5, 7, 0, 9, 11, 13, 15, 17, 0, 0, 19, 21, 23, 0, 0, 25, 0, 27, 29, 31, 33, 35, 0, 37, 0, 39, 0, 0, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 0, 10, 12, 14, 16, 18, 0, 0, 20, 22, 24, 0, 0, 26, 0, 28, 30, 32, 34, 36, 0, 38, 0, 40, 0, 0, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![2, 2, 1, 2, 0, 2, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 2, 1, 2, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![7418, -172, -3366, -9318, -10449, 38166, 38166, -13724, -16035, 37977, -2887, -8501, 1122, 21561, -3366, -3879, 12578, -5887, -1926, -708, 2503, -46294, -16382, -49797, 6465, -9822, 19107, -1744, 14265, -8841, -10484, -836, 10887, 3784, -5827, 3773, -8856, 11440, -5346, 2837, -3353, 7596, -3323].span()
};
    let tree_70 = xgb_inference::Tree {
    base_weights: array![513, -16468, 1522, 1648, -9149, 685, 6644, 2448, -9778, -2404, 8358, -10912, 316, 853, -18255, 14141, -7042, 10502, -16462, -888, 8380, -11075, 5868, 835, 9239, 14161, -7637, -9505, 2684].span(),
    left_children: array![1, 3, 5, 0, 0, 7, 0, 9, 11, 13, 15, 0, 17, 19, 21, 23, 25, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 0, 0, 8, 0, 10, 12, 14, 16, 0, 18, 20, 22, 24, 26, 0, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 0, 1, 0, 0, 2, 0, 2, 0, 2, 1, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![-283384, -292036, 53840, 1648, -9149, 167385, 6644, -9318, -25395, -23330, 3573, -10912, 13082, -29168, -7751, 35182, -25973, 10502, 53928, -888, 8380, -11075, 5868, 835, 9239, 14161, -7637, -9505, 2684].span()
};
    let tree_71 = xgb_inference::Tree {
    base_weights: array![519, -14218, 1350, 1372, -8157, 13, 14003, 1324, -18417, 10514, 1223, -1950, 8663, -13006, 3035, -14710, 7100, 2619, -31389, -4784, 11705, 918, -7614, 53, 12023, 2442, -12954, 4640, -3498].span(),
    left_children: array![1, 3, 5, 0, 0, 7, 9, 11, 13, 0, 15, 17, 19, 0, 0, 21, 0, 23, 25, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 0, 0, 8, 10, 12, 14, 0, 16, 18, 20, 0, 0, 22, 0, 24, 26, 0, 28, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 0, 1, 0, 0, 1, 2, 2, 0, 0, 2, 1, 1, 0, 0, 1, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![-283813, -292036, 27360, 1372, -8157, 18384, 139167, 31744, 31519, 10514, 410059, -5127, -7958, -13006, 3035, 36854, 7100, -5403, -18854, -4784, 62989, 918, -7614, 53, 12023, 2442, -12954, 4640, -3498].span()
};
    let tree_72 = xgb_inference::Tree {
    base_weights: array![216, 3577, -3492, -717, 25567, -15089, 120, 1947, -10186, 33152, -568, 10133, -2332, -2823, 31443, 1648, 14424, -31255, 1560, 1035, -14187, 11703, 2820, -11209, -2912, -3586, 10401, -951, 7968, 379, -11427, 7619, -3545].span(),
    left_children: array![1, 3, 5, 7, 9, 0, 11, 13, 0, 15, 0, 0, 17, 19, 21, 0, 0, 23, 25, 27, 0, 0, 0, 0, 0, 29, 31, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 0, 12, 14, 0, 16, 0, 0, 18, 20, 22, 0, 0, 24, 26, 28, 0, 0, 0, 0, 0, 30, 32, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![1, 1, 1, 1, 2, 0, 1, 2, 0, 0, 0, 0, 1, 2, 2, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![-6612, -9167, -5403, -10168, 28241, -15089, -5127, -10292, -10186, -11628, -568, 10133, -2745, -17687, -172, 1648, 14424, 28241, 39284, -29168, -14187, 11703, 2820, -11209, -2912, 35614, 146172, -951, 7968, 379, -11427, 7619, -3545].span()
};
    let tree_73 = xgb_inference::Tree {
    base_weights: array![-97, 595, -4972, -1103, 17205, 2878, -6606, -470, 9022, -1887, 17593, -13310, -2860, 4188, -4917, 2578, -10063, 27380, -2664, 16274, -8115, -6978, 2248, 13934, 1880, -5764, 3329, -2330, 16374, -13440, -706].span(),
    left_children: array![1, 3, 0, 5, 7, 9, 11, 13, 0, 15, 17, 0, 19, 0, 0, 21, 0, 23, 25, 27, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 0, 6, 8, 10, 12, 14, 0, 16, 18, 0, 20, 0, 0, 22, 0, 24, 26, 28, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![1, 1, 0, 1, 0, 1, 1, 2, 0, 1, 0, 0, 2, 0, 0, 0, 0, 2, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![64025, 27360, -4972, -6612, 20255, -10789, -5403, 285706, 9022, -11756, 14837, -13310, 13061, 4188, -4917, -23949, -10063, -12238, 46895, 5082, 35830, -6978, 2248, 13934, 1880, -5764, 3329, -2330, 16374, -13440, -706].span()
};
    let tree_74 = xgb_inference::Tree {
    base_weights: array![-287, 688, -13494, -6095, 1882, -10746, 5763, 26708, -666, 4434, -1908, -3910, 42096, -8610, 1068, 16106, 3667, 8507, -424, -4646, 593].span(),
    left_children: array![1, 3, 5, 0, 7, 0, 9, 11, 13, 0, 0, 0, 15, 0, 17, 0, 0, 0, 19, 0, 0].span(),
    right_children: array![2, 4, 6, 0, 8, 0, 10, 12, 14, 0, 0, 0, 16, 0, 18, 0, 0, 0, 20, 0, 0].span(),
    split_indices: array![0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 2, 0, 1, 0, 0, 0, 2, 0, 0].span(),
    split_conditions: array![88157, -16417, 99588, -6095, -15899, -10746, 106299, 12075, -15519, 4434, -1908, -3910, -52521, -8610, -15208, 16106, 3667, 8507, -40650, -4646, 593].span()
};
    let tree_75 = xgb_inference::Tree {
    base_weights: array![-286, 1438, -7271, -294, 9293, 15984, -13398, -21186, 1816, 8767, -1535, -19702, 6883, 4466, -13239, 9930, -6, -25958, 2044, 9201, -6310, 5858, -3755, -17820, 3421, -32092, -527, -773, -14086, 12117, 285, -863, -11702].span(),
    left_children: array![1, 3, 5, 7, 0, 9, 11, 13, 15, 0, 0, 17, 19, 21, 0, 0, 23, 25, 0, 0, 0, 0, 0, 27, 29, 31, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 0, 10, 12, 14, 16, 0, 0, 18, 20, 22, 0, 0, 24, 26, 0, 0, 0, 0, 0, 28, 30, 32, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![59762, 55670, -16624, -15968, 9293, 102363, 87446, -16313, -15588, 8767, -1535, 14448, 95021, 13082, -13239, 9930, -40650, 58210, 2044, 9201, -6310, 5858, -3755, 6653, -14552, -53883, -527, -773, -14086, 12117, 285, -863, -11702].span()
};
    let tree_76 = xgb_inference::Tree {
    base_weights: array![-191, 689, -12236, -5740, 1804, -10270, 6354, 24945, -584, 3945, -1204, -2701, 37067, -9347, 819, 2328, 13882, 8241, -407, -5874, 304].span(),
    left_children: array![1, 3, 5, 0, 7, 0, 9, 11, 13, 0, 0, 0, 15, 0, 17, 0, 0, 0, 19, 0, 0].span(),
    right_children: array![2, 4, 6, 0, 8, 0, 10, 12, 14, 0, 0, 0, 16, 0, 18, 0, 0, 0, 20, 0, 0].span(),
    split_indices: array![0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 2, 0, 0].span(),
    split_conditions: array![88157, -16417, 99588, -5740, -15899, -10270, 106299, 12075, -15623, 3945, -1204, -2701, -16348, -9347, -15484, 2328, 13882, 8241, -51159, -5874, 304].span()
};
    let tree_77 = xgb_inference::Tree {
    base_weights: array![-279, 1613, -5277, -1367, 14105, -31111, 375, 787, -7955, 31576, 2530, -2002, -12126, 19769, -5396, -1418, 10379, -2127, 16013, -13469, 6516, 10587, -923, -25344, 8503, 17145, -4037, -13031, 5066, -20602, 7456, 10677, -7906, 9738, -4705, -12200, -61, 11934, -5194, -12454, 3325].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 0, 17, 19, 0, 0, 21, 23, 25, 0, 0, 0, 27, 0, 0, 0, 29, 31, 33, 35, 0, 0, 0, 37, 0, 39, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 0, 18, 20, 0, 0, 22, 24, 26, 0, 0, 0, 28, 0, 0, 0, 30, 32, 34, 36, 0, 0, 0, 38, 0, 40, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![2, 2, 2, 4, 1, 1, 0, 1, 0, 1, 1, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![80395, 28241, 96742, 493288, -3366, 4160, -42815, 2226, -7955, -8200, 2986, -2002, -12126, 155708, 22176, -36237, 10379, -2127, 16013, 53150, 6516, 10587, -923, 144032, 146172, -23330, -23949, -13031, 5066, -20602, 17072, 10677, 250871, 9738, -4705, -12200, -61, 11934, -5194, -12454, 3325].span()
};
    let tree_78 = xgb_inference::Tree {
    base_weights: array![-404, 2776, -3937, -1621, 18018, -20956, -203, 3911, -14795, -5273, 34556, -4413, -12898, 6481, -2874, 424, 10021, 1894, -23038, 7307, -8420, 16381, -1094, -10594, 6107, -8815, 1269, 6013, -17950, -6990, 6425, -5698, -13529, 23533, -3161, -170, 8493, 619, -11927, -6158, 2408, 10894, -1383, -8714, 385].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 0, 0, 25, 27, 0, 29, 31, 0, 0, 0, 0, 0, 0, 0, 33, 35, 37, 0, 0, 39, 0, 41, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 0, 0, 26, 28, 0, 30, 32, 0, 0, 0, 0, 0, 0, 0, 34, 36, 38, 0, 0, 40, 0, 42, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![1, 2, 1, 2, 0, 0, 2, 2, 0, 1, 0, 0, 0, 0, 2, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![-6612, -10292, -2745, -40066, -7553, 37977, -8735, -41818, -17657, -10340, 52439, -10484, -12898, 6481, 38166, -48045, 10021, -11618, -11307, 7307, -8420, 16381, -1094, -10594, 6107, -8815, 1122, -13758, 14837, -6990, 6425, 26254, -13529, 73779, 2503, -170, 8493, 619, -11927, -6158, 2408, 10894, -1383, -8714, 385].span()
};
    let tree_79 = xgb_inference::Tree {
    base_weights: array![-574, -8681, 568, -19030, 5374, 9266, -1014, -3901, -12689, -5880, 102, -7332, 9731, 21734, -1584, -5192, 8770, 66, 8931, -9544, 963, 318, -16836, 5978, -849].span(),
    left_children: array![1, 3, 5, 7, 0, 0, 9, 11, 0, 0, 13, 0, 15, 17, 19, 0, 0, 0, 0, 21, 23, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 0, 0, 10, 12, 0, 0, 14, 0, 16, 18, 20, 0, 0, 0, 0, 22, 24, 0, 0, 0, 0].span(),
    split_indices: array![0, 1, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![-56290, 39271, -37673, 7509, 5374, 9266, -31531, -25665, -12689, -5880, -22922, -7332, -86281, -33255, -2281, -5192, 8770, 66, 8931, -5492, 14837, 318, -16836, 5978, -849].span()
};
    let tree_80 = xgb_inference::Tree {
    base_weights: array![-592, 42, -4577, -1452, 14354, 906, -8555, 7969, 2800, -1701, 15419, -14177, -1526, -6247, 6186, -13, -17473, -5900, 32196, 5662, -21085, -723, 8011, 4781, -14723, 3845, -6500, 14641, 1105, -5638, 3869, -11706, 2699].span(),
    left_children: array![1, 3, 0, 5, 7, 9, 11, 0, 13, 15, 17, 0, 19, 0, 0, 21, 23, 25, 27, 29, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 0, 6, 8, 10, 12, 0, 14, 16, 18, 0, 20, 0, 0, 22, 24, 26, 28, 30, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![1, 1, 0, 2, 1, 2, 2, 0, 1, 2, 0, 0, 1, 0, 0, 2, 1, 0, 1, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![64025, 27360, -4577, 70081, 36854, 28241, 78644, 7969, 44001, 13061, -7250, -14177, 17072, -6247, 6186, 7418, -7958, -23949, -1951, 1881, 272472, -723, 8011, 4781, -14723, 3845, -6500, 14641, 1105, -5638, 3869, -11706, 2699].span()
};
    let tree_81 = xgb_inference::Tree {
    base_weights: array![-624, 6074, -1914, -414, 9069, -7755, -396, -11635, 12064, -6950, 642, 12390, -19415, 9006, -734, -3467, 23845, -7358, 875, 15032, -227, 10062, -512].span(),
    left_children: array![1, 3, 5, 7, 0, 0, 9, 11, 0, 0, 13, 15, 0, 0, 17, 0, 19, 0, 21, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 0, 0, 10, 12, 0, 0, 14, 16, 0, 0, 18, 0, 20, 0, 22, 0, 0, 0, 0].span(),
    split_indices: array![1, 2, 1, 1, 0, 0, 2, 2, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 0].span(),
    split_conditions: array![-15899, -51743, -15519, -16140, 9069, -7755, -55246, -54078, 12064, -6950, -51937, 54793, -19415, 9006, -46294, -3467, 83195, -7358, -14656, 15032, -227, 10062, -512].span()
};
    let tree_82 = xgb_inference::Tree {
    base_weights: array![-352, 12270, -1027, -2079, 7804, -73, -7554, 16215, -1462, 12031, -6046, -33169, 687, 7845, -10098, -11995, -2634, 24239, -1547, -6021, 16693, -10960, 148].span(),
    left_children: array![1, 3, 5, 0, 0, 7, 0, 9, 11, 0, 13, 15, 17, 0, 0, 0, 0, 19, 21, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 0, 0, 8, 0, 10, 12, 0, 14, 16, 18, 0, 0, 0, 0, 20, 22, 0, 0, 0, 0].span(),
    split_indices: array![2, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 2, 2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0].span(),
    split_conditions: array![-65171, -16348, 102363, -2079, 7804, -16382, -7554, 56275, -16002, 12031, -16624, -52132, -51548, 7845, -10098, -11995, -2634, 6201, -15277, -6021, 16693, -10960, 148].span()
};
    let tree_83 = xgb_inference::Tree {
    base_weights: array![-420, 7258, -1559, -6355, 24582, -11143, 82, -8217, 6567, -534, 12270, 20704, -1601, 12013, -2844, -25508, 303, 841, -11614, 1668, -14808, -439, 3312, 825, -9355].span(),
    left_children: array![1, 3, 5, 7, 9, 0, 11, 0, 0, 0, 0, 13, 15, 0, 0, 17, 19, 0, 0, 21, 23, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 0, 12, 0, 0, 0, 0, 14, 16, 0, 0, 18, 20, 0, 0, 22, 24, 0, 0, 0, 0].span(),
    split_indices: array![1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0].span(),
    split_conditions: array![-16244, -16417, -16002, 99588, 33267, -11143, -15484, -8217, 6567, -534, 12270, 28461, -51159, 12013, -2844, -9583, 69710, 841, -11614, 41338, 122820, -439, 3312, 825, -9355].span()
};
    let tree_84 = xgb_inference::Tree {
    base_weights: array![-490, 6291, -1768, -2616, 20757, -7957, -236, -9646, 9483, 12363, -2112, 5716, -1252, 7828, -7973, -18195, 240, -9045, 4942, -8545, -43, 8581, -1625, -6118, 140].span(),
    left_children: array![1, 3, 5, 7, 9, 0, 11, 0, 13, 0, 0, 0, 15, 0, 17, 19, 21, 0, 0, 0, 0, 0, 23, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 0, 12, 0, 14, 0, 0, 0, 16, 0, 18, 20, 22, 0, 0, 0, 0, 0, 24, 0, 0].span(),
    split_indices: array![1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 2, 1, 0, 0, 0, 0, 0, 2, 0, 0].span(),
    split_conditions: array![-15899, -16348, -15519, 33267, 21561, -7957, -15208, -9646, 83195, 12363, -2112, 5716, -14034, 7828, 103533, -40650, -13724, -9045, 4942, -8545, -43, 8581, -40650, -6118, 140].span()
};
    let tree_85 = xgb_inference::Tree {
    base_weights: array![-454, -4756, 170, 14772, -1198, 9516, -310, -19411, 180, 8071, -8675, 3681, -10692, 18461, -1806, -10430, 13619, -9911, -47, 4013, -8151, 7082, -471].span(),
    left_children: array![1, 0, 3, 5, 7, 0, 9, 11, 13, 0, 0, 0, 0, 15, 17, 19, 0, 0, 21, 0, 0, 0, 0].span(),
    right_children: array![2, 0, 4, 6, 8, 0, 10, 12, 14, 0, 0, 0, 0, 16, 18, 20, 0, 0, 22, 0, 0, 0, 0].span(),
    split_indices: array![1, 0, 1, 0, 1, 0, 2, 0, 2, 0, 0, 0, 0, 2, 1, 0, 0, 0, 1, 0, 0, 0, 0].span(),
    split_conditions: array![-16658, -4756, -16382, 56275, -16002, 9516, -54662, 13836, -51548, 8071, -8675, 3681, -10692, -54078, -15277, -8872, 13619, -9911, -14656, 4013, -8151, 7082, -471].span()
};
    let tree_86 = xgb_inference::Tree {
    base_weights: array![-309, 9031, -1096, 22813, -4683, -8914, 11, 904, 10355, 11556, -1110, -1305, 7079, -8369, 303, 9253, -998, -3356, 747].span(),
    left_children: array![1, 3, 5, 7, 0, 0, 9, 0, 0, 11, 13, 0, 0, 0, 15, 0, 17, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 0, 0, 10, 0, 0, 12, 14, 0, 0, 0, 16, 0, 18, 0, 0].span(),
    split_indices: array![2, 0, 2, 2, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 1, 0, 1, 0, 0].span(),
    split_conditions: array![-60889, 13082, -55246, -64003, -4683, -8914, -53300, 904, 10355, 73985, -52132, -1305, 7079, -8369, -16140, 9253, -11376, -3356, 747].span()
};
    let tree_87 = xgb_inference::Tree {
    base_weights: array![-213, 2896, -3577, -1763, 14277, -18865, -293, 1568, -10506, 11531, 4832, -3717, -11585, 6106, -2818, -10374, 8619, -18741, 24202, -9159, 5073, -20165, 2251, 6811, -26279, -1106, 35782, 5699, -12602, 14174, -2397, -9690, -6098, 11200, -2492, -5511, 13295, -18032, 1658, 1720, -10786, 16010, 2350, 4954, -6802, -4034, 1020].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 0, 0, 17, 19, 0, 0, 21, 23, 25, 27, 29, 0, 0, 31, 33, 35, 37, 39, 41, 0, 0, 0, 0, 0, 43, 0, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 0, 0, 18, 20, 0, 0, 22, 24, 26, 28, 30, 0, 0, 32, 34, 36, 38, 40, 42, 0, 0, 0, 0, 0, 44, 0, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![1, 1, 1, 1, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 1, 0, 0, 0, 1, 2, 0, 2, 1, 1, 0, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![-6612, -11376, -2745, -11859, -36237, 37977, -8735, 6201, -10506, 11531, -5788, -10484, -11585, 6106, 58210, -18678, -13827, -10168, 29641, -9159, 5073, 2226, 73779, -23949, -46294, -14898, -13344, 5699, -12602, 14174, -2397, -9690, 4367, 11200, 125155, -5511, 13295, -18032, 1658, 1720, -10786, 16010, 2350, 4954, -6802, -4034, 1020].span()
};
    let tree_88 = xgb_inference::Tree {
    base_weights: array![-328, 3333, -2557, -1108, 24662, -14655, 178, 3521, -27075, 12051, 900, 22382, -2544, -2033, 19620, -2552, -9603, -1502, 10745, -16856, 1184, 10293, -8781, -1367, 10978, 7923, -29958, 4635, -11855, -2581, 12318, -5107, 6640, -12769, 4086, -4619, 3289].span(),
    left_children: array![1, 3, 5, 7, 9, 0, 11, 13, 15, 0, 0, 17, 19, 21, 23, 0, 0, 0, 0, 25, 27, 29, 31, 0, 0, 0, 33, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 0, 12, 14, 16, 0, 0, 18, 20, 22, 24, 0, 0, 0, 0, 26, 28, 30, 32, 0, 0, 0, 34, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 2, 2, 0, 0, 0, 0, 1, 2, 2, 1, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![-5492, -11046, -2281, -14702, -9308, -14655, 8395, -21599, -10547, 12051, 900, -46294, 26254, -17687, -18854, -2552, -9603, -1502, 10745, -15899, 418233, -29558, 39271, -1367, 10978, 7923, 144032, -52132, -11855, -2581, 12318, -5107, 6640, -12769, 4086, -4619, 3289].span()
};
    let tree_89 = xgb_inference::Tree {
    base_weights: array![-236, -13975, 571, 1432, -7969, 9191, -1540, 15588, -5558, 5358, -2778, -4743, 25121, -10000, -995, 11492, 12643, -23190, 1634, 9101, -7286, -11238, -912, 4393, -647].span(),
    left_children: array![1, 3, 5, 0, 0, 7, 9, 11, 0, 0, 13, 0, 15, 0, 17, 19, 0, 21, 23, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 0, 0, 8, 10, 12, 0, 0, 14, 0, 16, 0, 18, 20, 0, 22, 24, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 0, 0, 0, 0, 2, 2, 1, 0, 0, 0, 0, 1, 0, 2, 1, 0, 0, 2, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![-283813, -292036, -22922, 1432, -7969, 167385, -65171, -13758, -5558, 5358, -19266, -4743, 1881, -10000, -54467, -7095, 12643, 73985, -44153, 9101, -7286, -11238, -912, 4393, -647].span()
};
    let tree_90 = xgb_inference::Tree {
    base_weights: array![-462, 188, -4590, -1258, 13605, 973, -9715, 7611, 2463, -1028, 8087, 5923, -25336, -5081, 5027, 952, -19118, -8138, 9544, -37783, 795, -695, 6518, -11061, 4510, -7400, 2652, -15877, -1379].span(),
    left_children: array![1, 3, 0, 5, 7, 9, 11, 0, 13, 15, 0, 17, 19, 0, 0, 21, 23, 25, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 0, 6, 8, 10, 12, 0, 14, 16, 0, 18, 20, 0, 0, 22, 24, 26, 0, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![1, 1, 0, 1, 1, 1, 0, 0, 1, 2, 0, 0, 2, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![64025, 27360, -4590, 3953, 36854, 2503, 33267, 7611, 44001, 73779, 8087, -682, 250871, -5081, 5027, 28241, 123209, 132939, 9544, 55670, 795, -695, 6518, -11061, 4510, -7400, 2652, -15877, -1379].span()
};
    let tree_91 = xgb_inference::Tree {
    base_weights: array![-369, 2739, -3253, -1021, 23135, -10769, -529, 3398, -27098, 11543, 5248, 9174, -4674, 312, 7174, -1467, -10758, -5336, 8120, -9588, 38603, -11002, -227, -4171, 19909, -12671, 13739, 16931, 3139, -7460, 3534, 1141, -9450, 9542, 871, 10365, -894, 2446, -10139].span(),
    left_children: array![1, 3, 5, 7, 9, 0, 11, 13, 15, 0, 17, 19, 21, 23, 0, 0, 0, 0, 0, 25, 27, 0, 29, 31, 33, 0, 35, 0, 0, 0, 37, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 0, 12, 14, 16, 0, 18, 20, 22, 24, 0, 0, 0, 0, 0, 26, 28, 0, 30, 32, 34, 0, 36, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![16146, 5763, 20846, -5492, 8395, -10769, -48045, 191905, -38899, 11543, 12075, -52716, -37536, -11046, 7174, -1467, -10758, -5336, 8120, 73985, 38406, -11002, 26254, -17202, -9308, -12671, 85688, 16931, 3139, -7460, 418233, 1141, -9450, 9542, 871, 10365, -894, 2446, -10139].span()
};
    let tree_92 = xgb_inference::Tree {
    base_weights: array![-479, 859, -9369, -456, 20800, -23844, 5138, 1120, -7259, 13255, -3879, -1090, -9420, -3516, 6380, -641, 8891, -20852, 1447, 2969, -12220, 6243, -168].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 0, 0, 0, 0, 0, 0, 0, 17, 0, 19, 21, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 0, 0, 0, 0, 0, 0, 0, 18, 0, 20, 22, 0, 0, 0, 0].span(),
    split_indices: array![0, 0, 0, 0, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 2, 0, 0, 0, 0].span(),
    split_conditions: array![75856, 67540, 87446, 59762, -8735, -12170, -54467, 55670, -7259, 13255, -3879, -1090, -9420, -3516, 6380, -15968, 8891, -60889, -51548, 2969, -12220, 6243, -168].span()
};
    let tree_93 = xgb_inference::Tree {
    base_weights: array![-373, -1172, 13371, 269, -22785, 7324, -1082, -1274, 10363, -266, -10760, 79, -20380, -1115, 15162, -9610, -189, 136, -8486, -714, 8111].span(),
    left_children: array![1, 3, 5, 7, 9, 0, 0, 11, 0, 0, 0, 13, 15, 17, 19, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 0, 0, 12, 0, 0, 0, 14, 16, 18, 20, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![2, 2, 0, 2, 1, 0, 0, 2, 0, 0, 0, 2, 2, 2, 1, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![410059, 285706, 31968, 246006, 28845, 7324, -1082, 167385, 10363, -266, -10760, 125155, 191905, 103359, 11997, -9610, -189, 136, -8486, -714, 8111].span()
};
    let tree_94 = xgb_inference::Tree {
    base_weights: array![-356, -12636, 406, 1340, -7093, 5827, -348, -15238, 759, 3809, -10713, 7885, -646, -5439, 421, 3626, -522].span(),
    left_children: array![1, 3, 5, 0, 0, 0, 7, 9, 11, 0, 0, 0, 13, 0, 15, 0, 0].span(),
    right_children: array![2, 4, 6, 0, 0, 0, 8, 10, 12, 0, 0, 0, 14, 0, 16, 0, 0].span(),
    split_indices: array![0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![-283384, -292036, -277235, 1340, -7093, 5827, -56290, 38166, -37673, 3809, -10713, 7885, -31531, -5439, -14702, 3626, -522].span()
};
    let tree_95 = xgb_inference::Tree {
    base_weights: array![-278, -3551, 3450, 31, -27502, 11689, -4093, -4780, 11392, -1349, -11826, 4478, 11162, -19915, 6779, -8032, 7590, 26633, -3296, 16782, -10317, -12667, -791, 17487, -12256, 681, -33896, 305, 12003, 4189, -16274, 24515, -1976, -10923, 4721, -9802, 10555, 10237, 2651, -10267, 2269, -2449, 5989, 665, -13286, -8958, 1536, -768, 10947, 6589, -2951, -4336, 5408].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 17, 0, 0, 19, 0, 21, 23, 25, 0, 27, 29, 31, 33, 0, 35, 37, 39, 41, 43, 0, 0, 0, 45, 47, 0, 0, 49, 0, 0, 0, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 18, 0, 0, 20, 0, 22, 24, 26, 0, 28, 30, 32, 34, 0, 36, 38, 40, 42, 44, 0, 0, 0, 46, 48, 0, 0, 50, 0, 0, 0, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![2, 2, 1, 0, 0, 1, 2, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 2, 2, 0, 2, 0, 0, 2, 0, 2, 2, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![7418, -8735, 3953, 55670, 29641, 2503, 144032, -1364, 75856, -1349, -11826, -3366, 11162, 10374, 43103, -11307, 7590, -51548, -55051, 37977, 53150, -12667, 41338, 229464, 53928, -37536, -32282, 305, 12003, 4189, -16002, -9374, -1976, -10923, 73779, -9802, 10555, 10237, 316843, -10267, 2269, -2449, 5989, 665, -13286, -8958, 1536, -768, 10947, 6589, -2951, -4336, 5408].span()
};
    let tree_96 = xgb_inference::Tree {
    base_weights: array![-287, 8156, -1565, 17047, -3715, -10610, -3, -1767, 23811, 2681, -7983, 33164, 198, -237, 10048, -20270, 3165, 1104, 14499, 2249, -11375, -14598, 317, 21914, -12059, -54, 8816, 6783, -6229, 409, 10944, 1595, -8032].span(),
    left_children: array![1, 3, 5, 7, 0, 0, 9, 0, 11, 13, 15, 17, 0, 19, 0, 21, 23, 0, 0, 25, 0, 0, 27, 29, 31, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 0, 0, 10, 0, 12, 14, 16, 18, 0, 20, 0, 22, 24, 0, 0, 26, 0, 0, 28, 30, 32, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![-16244, -54078, -16002, -16658, -3715, -10610, 46599, -1767, 83195, 41338, 18510, 54793, 198, 38406, 10048, 58598, 57435, 1104, 14499, 35182, -11375, -14598, 68842, 52885, 129047, -54, 8816, 6783, -6229, 409, 10944, 1595, -8032].span()
};
    let tree_97 = xgb_inference::Tree {
    base_weights: array![-275, 6393, -1554, -4314, 15576, -7031, -230, -7496, 6231, 9324, 3763, 3387, -4366, 8316, -5708, -1947, 25275, -9881, 1522, -26322, 2146, 13597, 7787, 5177, -9197, 104, -11923, 8394, -491, -7425, 8532, -756, 6403].span(),
    left_children: array![1, 3, 5, 7, 9, 0, 11, 0, 0, 0, 13, 15, 17, 0, 0, 19, 21, 0, 23, 25, 27, 0, 29, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 0, 12, 0, 0, 0, 14, 16, 18, 0, 0, 20, 22, 0, 24, 26, 28, 0, 30, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![-15899, -16417, -15519, 99588, -16382, -7031, 16146, -7496, 6231, 9324, 21561, -2281, 26254, 8316, -5708, -44737, -13724, -9881, 418233, -52521, -40066, 13597, -10340, 10374, -9197, 104, -11923, 8394, -491, -7425, 8532, -756, 6403].span()
};
    let tree_98 = xgb_inference::Tree {
    base_weights: array![-214, -1045, 14015, 293, -21048, 6367, 40, -1146, 9534, -438, -9658, 1453, -11289, -3183, 11640, 3114, -31752, 1124, -3842, 1622, 9938, -2976, 9160, -11847, -1065].span(),
    left_children: array![1, 3, 5, 7, 9, 0, 0, 11, 0, 0, 0, 13, 15, 17, 19, 21, 23, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 0, 0, 12, 0, 0, 0, 14, 16, 18, 20, 22, 24, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![2, 2, 0, 2, 1, 0, 0, 1, 0, 0, 0, 2, 0, 2, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![410059, 285706, 31968, 246006, 28845, 6367, 40, 3953, 9534, -438, -9658, 7418, 33267, -40066, 2503, -682, 18384, 1124, -3842, 1622, 9938, -2976, 9160, -11847, -1065].span()
};
    let tree_99 = xgb_inference::Tree {
    base_weights: array![-11, 1503, -6699, -198, 16768, 11337, -14508, -1837, 19270, -380, 10394, -1532, 5994, -21564, 1765, -3018, 6056, -3646, 12134, 7028, -6502, -7352, -10072, -201, -21674, -6801, 5452, -778, 10804, -8525, -594].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 0, 0, 0, 21, 0, 23, 0, 0, 0, 0, 0, 25, 0, 27, 29, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 0, 0, 0, 22, 0, 24, 0, 0, 0, 0, 0, 26, 0, 28, 30, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 0, 1, 4, 2, 1, 1, 1, 0, 1, 0, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![62989, 53928, -16555, 493288, 30187, -16658, 10374, 49939, -286472, -16106, 10394, -1532, 5994, -8735, 1765, 18384, 6056, -3646, 12134, 7028, -6502, -33255, -10072, 12894, 22176, -6801, 5452, -778, 10804, -8525, -594].span()
};
    let num_trees: u32 = 100;
    let base_score: i32 = 21017;
    let opt_type: u8 = 1;
    let trees: Span<xgb_inference::Tree> = array![tree_0, tree_1, tree_2, tree_3, tree_4, tree_5, tree_6, tree_7, tree_8, tree_9, tree_10, tree_11, tree_12, tree_13, tree_14, tree_15, tree_16, tree_17, tree_18, tree_19, tree_20, tree_21, tree_22, tree_23, tree_24, tree_25, tree_26, tree_27, tree_28, tree_29, tree_30, tree_31, tree_32, tree_33, tree_34, tree_35, tree_36, tree_37, tree_38, tree_39, tree_40, tree_41, tree_42, tree_43, tree_44, tree_45, tree_46, tree_47, tree_48, tree_49, tree_50, tree_51, tree_52, tree_53, tree_54, tree_55, tree_56, tree_57, tree_58, tree_59, tree_60, tree_61, tree_62, tree_63, tree_64, tree_65, tree_66, tree_67, tree_68, tree_69, tree_70, tree_71, tree_72, tree_73, tree_74, tree_75, tree_76, tree_77, tree_78, tree_79, tree_80, tree_81, tree_82, tree_83, tree_84, tree_85, tree_86, tree_87, tree_88, tree_89, tree_90, tree_91, tree_92, tree_93, tree_94, tree_95, tree_96, tree_97, tree_98, tree_99].span();
    let mut result: i32 = xgb_inference::accumulate_scores_from_trees(num_trees, trees, input_vector, 0, 0);

    if opt_type == 1 {
        // Implement logic here
    } else {
        result = result + base_score;
    }

    return result;
}