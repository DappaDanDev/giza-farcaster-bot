mod xgb_inference;

fn main(input_vector: Span<i32>) -> i32 {
    let tree_0 = xgb_inference::Tree {
    base_weights: array![-24635, -85460, 87755, -89709, 48966, 48603, 167954, -100731, -50266, 64903, -81142, 248308, 101444, -105628, -15666, -3707, -79556, -53234, 84414, -6538, -28045, 25362, 273677, 45064, 135232, -31973, -8781, -72058, 25362, 60659, -59023, -43773, -88830, -76095, 4106, 98892, -18504, 94434, 25362, -15261, 105740, 191404, 7284, -6538, -25288, 37391, 1632, -24782, 7338, -20196, 4106, -14637, -32405, -6538, -26556, 17795, 45488, 43966, 4106, 72722, 7338].span(),
    left_children: array![1, 3, 5, 7, 0, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 0, 0, 0, 37, 39, 41, 0, 0, 43, 0, 45, 47, 49, 51, 53, 0, 55, 0, 0, 0, 0, 57, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 0, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 0, 0, 0, 38, 40, 42, 0, 0, 44, 0, 46, 48, 50, 52, 54, 0, 56, 0, 0, 0, 0, 58, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![2, 1, 1, 2, 0, 0, 0, 1, 0, 0, 2, 0, 2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 2, 0, 2, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![20500000, 75000000, 68900000, 11000000, 48966, 2147483647, 2147483647, 13300000, 2147483647, 2147483647, 23900000, 904500000, 142900000, 2147483647, 8800000, 10600000, 12500000, 75100000, 61800000, -6538, -28045, 25362, 188500000, 2147483647, 209000000, -31973, -8781, 17200000, 25362, 12300000, 2147483647, 2147483647, 2147483647, 904500000, 4106, 50700000, -18504, 94434, 25362, -15261, 2147483647, 2147483647, 7284, -6538, -25288, 37391, 1632, -24782, 7338, -20196, 4106, -14637, -32405, -6538, -26556, 17795, 45488, 43966, 4106, 72722, 7338].span()
};
    let tree_1 = xgb_inference::Tree {
    base_weights: array![-20123, -74612, 53879, -78118, 28901, 26500, 106952, -88884, -41059, 36424, -72252, 113540, -4641, -94027, -13554, -12345, -77275, -43846, 49468, -25695, -5215, 42306, 82395, -28504, -7535, -64162, 18830, 20761, -54320, -27048, -30310, -24248, -9681, 53226, 36882, -2093, 96182, -23289, -4531, -6464, 26544, -25985, -2882, -16343, 7983, 8143, -13220, -15212, 14248, 33999, 7756].span(),
    left_children: array![1, 3, 5, 7, 0, 9, 11, 13, 15, 17, 19, 21, 0, 23, 25, 27, 29, 31, 33, 0, 0, 0, 35, 0, 0, 37, 0, 39, 41, 43, 0, 0, 45, 0, 47, 0, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 0, 10, 12, 14, 16, 18, 20, 22, 0, 24, 26, 28, 30, 32, 34, 0, 0, 0, 36, 0, 0, 38, 0, 40, 42, 44, 0, 0, 46, 0, 48, 0, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![2, 1, 1, 2, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 2, 0, 1, 2, 1, 0, 0, 1, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![19400000, 75000000, 68900000, 11000000, 28901, 2147483647, 2147483647, 13300000, 2147483647, 2147483647, 33800000, 2147483647, -4641, 2147483647, 8800000, 10600000, 5600000, 24500000, 10700000, -25695, -5215, 42306, 2147483647, -28504, -7535, 7200000, 18830, 7600000, 13700000, 4400000, -30310, -24248, 45600000, 53226, 24500000, -2093, 209000000, -23289, -4531, -6464, 26544, -25985, -2882, -16343, 7983, 8143, -13220, -15212, 14248, 33999, 7756].span()
};
    let tree_2 = xgb_inference::Tree {
    base_weights: array![-16826, -64182, 35783, -78120, -21208, 41756, -67662, -87011, -36144, -32221, 22535, 22438, 76269, -3901, -24601, -27207, -45443, 22555, -59860, 34051, -52859, 55485, -844, 92992, 49931, 4306, -68182, -7030, 24815, 10363, -23349, 75728, -18200, 9195, -61594, 9492, 50032, -39721, 27908, 8985, 101687, 1726, 75522, -24828, -2807, 31772, 2634, -28929, -9797, 11723, -28487, 6358, -29649, 13613, -16686, 38703, 20690, -14246, 21304, 30531, -8665].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 0, 21, 23, 0, 0, 0, 25, 27, 29, 31, 33, 35, 37, 39, 41, 0, 43, 0, 0, 0, 0, 45, 0, 0, 47, 49, 0, 51, 53, 0, 55, 57, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 0, 22, 24, 0, 0, 0, 26, 28, 30, 32, 34, 36, 38, 40, 42, 0, 44, 0, 0, 0, 0, 46, 0, 0, 48, 50, 0, 52, 54, 0, 56, 58, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![2, 1, 0, 2, 1, 1, 2, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 2, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 1, 2, 0, 2, 1, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![19400000, 7600000, 2147483647, 10200000, 75000000, 68900000, 26700000, 2147483647, 2147483647, 9800000, 22535, 29900000, 2147483647, -3901, -24601, -27207, 2147483647, 2147483647, 1900000, 2147483647, 566000000, 41900000, 53700000, 904500000, 2147483647, 4306, 7600000, -7030, 24815, 10363, -23349, 13000000, -18200, 9195, 13300000, 35500000, 50032, 41900000, 61800000, 8985, 125100000, 142900000, 250000000, -24828, -2807, 31772, 2634, -28929, -9797, 11723, -28487, 6358, -29649, 13613, -16686, 38703, 20690, -14246, 21304, 30531, -8665].span()
};
    let tree_3 = xgb_inference::Tree {
    base_weights: array![-13847, -61960, 20658, -84665, -47249, -1716, 49348, -28233, -25385, 5487, -50307, 34775, -7339, 43067, 37285, 9771, -21642, -64247, -28788, -58251, 6978, -15819, 43747, -38429, -27197, -27398, -10344, -21845, 8581, 26225, -39540, 24201, 68150, -25446, -3808, 16372, -6538, -24411, 11417, -21556, 10211, 25117, -511, 28540, 446].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 0, 15, 0, 17, 0, 19, 0, 21, 0, 0, 23, 25, 27, 29, 0, 31, 33, 0, 0, 35, 0, 0, 37, 39, 41, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 0, 16, 0, 18, 0, 20, 0, 22, 0, 0, 24, 26, 28, 30, 0, 32, 34, 0, 0, 36, 0, 0, 38, 40, 42, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![2, 2, 1, 1, 2, 2, 2, 0, 2, 0, 1, 0, 2, 0, 2, 0, 0, 1, 0, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![13700000, 6600000, 52800000, 8800000, 6800000, 14400000, 35500000, -28233, 2900000, 5487, 3700000, 34775, 20500000, 43067, 46100000, 9771, -21642, 1600000, 2147483647, 27600000, 39200000, -15819, 142900000, 2147483647, -27197, -27398, 2147483647, -21845, 8581, 1928100000, 70900000, 2147483647, 2147483647, -25446, -3808, 16372, -6538, -24411, 11417, -21556, 10211, 25117, -511, 28540, 446].span()
};
    let tree_4 = xgb_inference::Tree {
    base_weights: array![-11532, -56759, 12974, -65048, -18439, 17529, -69824, -29323, -52669, 10754, -33352, 2446, 40581, -3993, -25179, -59279, -2587, -22309, -6629, -42591, 12407, 87019, 33373, -27036, -48319, -27311, 12367, 34931, -17363, 15541, -65753, 33720, 7013, 7362, 31971, -13922, 39518, 9143, -16375, 10571, -20141, -5913, 20142, -27513, -10622, -8221, 7909, 26147, 9421].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 0, 15, 0, 17, 19, 21, 0, 0, 23, 25, 0, 27, 29, 31, 33, 35, 0, 37, 39, 0, 41, 0, 0, 43, 0, 45, 0, 0, 0, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 0, 16, 0, 18, 20, 22, 0, 0, 24, 26, 0, 28, 30, 32, 34, 36, 0, 38, 40, 0, 42, 0, 0, 44, 0, 46, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![2, 1, 0, 0, 1, 1, 2, 0, 2, 0, 1, 0, 2, 0, 0, 1, 0, 0, 1, 0, 0, 0, 2, 0, 1, 0, 0, 2, 0, 0, 1, 0, 2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![12100000, 7600000, 2147483647, 2147483647, 9800000, 56400000, 22500000, -29323, 10200000, 10754, 13300000, 2147483647, 31100000, -3993, -25179, 400000, 2147483647, -22309, 25000000, 566000000, 2147483647, 1247800000, 44300000, -27036, 500000, 2147483647, 12367, 8800000, -17363, 15541, 24500000, 33720, 25400000, 7362, 31971, -13922, 60400000, 9143, -16375, 10571, -20141, -5913, 20142, -27513, -10622, -8221, 7909, 26147, 9421].span()
};
    let tree_5 = xgb_inference::Tree {
    base_weights: array![-9506, -48681, 9338, -70061, -34520, 12912, -62585, -81887, -15657, -42591, 16530, 3425, 33858, -23082, -3158, -28117, -47999, 9776, -19030, -7307, -68156, 14540, -9239, 27460, -477, 79269, 25299, 13133, -24345, -22502, 20170, -79697, -16833, -19741, 4285, 31034, 6823, -11645, 30855, 15896, -1403, -13520, -27845, 9128, -18723, 28262, 56, 12339, 1973].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 0, 0, 0, 27, 0, 0, 29, 31, 0, 0, 0, 33, 35, 37, 0, 0, 0, 39, 41, 43, 0, 45, 0, 0, 0, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 0, 0, 0, 28, 0, 0, 30, 32, 0, 0, 0, 34, 36, 38, 0, 0, 0, 40, 42, 44, 0, 46, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![2, 2, 0, 1, 1, 1, 1, 1, 2, 1, 2, 2, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 1, 2, 0, 0, 0, 2, 2, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![12100000, 6600000, 2147483647, 8800000, 13300000, 68900000, 33800000, 1300000, 2900000, 1600000, 9500000, 12500000, 31100000, -23082, -3158, -28117, 1900000, 9776, -19030, 2147483647, 11300000, 14540, -9239, 27460, 13700000, 101900000, 61200000, 13133, -24345, -22502, 7300000, 8400000, 2147483647, -19741, 14400000, 31034, 6823, -11645, 188500000, 15896, -1403, -13520, -27845, 9128, -18723, 28262, 56, 12339, 1973].span()
};
    let tree_6 = xgb_inference::Tree {
    base_weights: array![-7973, -42250, 7008, -25461, -34491, 12828, -26647, -25299, -26680, 7735, 97725, -71664, 12947, -33873, 17044, 14882, -71769, 38745, 7010, -26831, -6124, 63235, -42389, -12922, -49857, -12447, 56524, 10879, 36076, -88158, -177, -6278, 28229, -26621, 6295, -22241, 2546, 9315, -19377, 31935, -6557, 1141, 15356, -5712, -30535].span(),
    left_children: array![1, 3, 5, 0, 7, 9, 11, 0, 13, 15, 17, 19, 21, 23, 25, 27, 29, 0, 0, 0, 0, 31, 33, 35, 37, 0, 39, 41, 0, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 0, 8, 10, 12, 0, 14, 16, 18, 20, 22, 24, 26, 28, 30, 0, 0, 0, 0, 32, 34, 36, 38, 0, 40, 42, 0, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![2, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 2, 2, 1, 2, 0, 1, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![12100000, 400000, 2147483647, -25461, 2147483647, 2147483647, 33000000, -25299, 13300000, 2147483647, 58000000, 29200000, 97000000, 1600000, 7300000, 2147483647, 83600000, 38745, 7010, -26831, -6124, 2147483647, 175100000, 2147483647, 2900000, -12447, 2147483647, 142900000, 36076, 9800000, -177, -6278, 28229, -26621, 6295, -22241, 2546, 9315, -19377, 31935, -6557, 1141, 15356, -5712, -30535].span()
};
    let tree_7 = xgb_inference::Tree {
    base_weights: array![-6664, -45635, 2388, -53516, -2207, 5933, -66288, -62171, -1191, 14437, -14092, -20364, 10570, -23779, -3260, -79678, -40963, 15150, -18076, -49037, 27942, 59733, 7070, -26597, -9141, 10364, -56125, 7734, -69793, -20637, 68744, 21973, 31953, 23752, 4826, 6128, -22535, -28255, -6334, 6576, -17513, 28965, 2829, 18693, -9026, -4604, 4053].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 17, 0, 0, 19, 21, 0, 0, 23, 25, 0, 0, 27, 29, 31, 33, 0, 0, 0, 35, 0, 37, 39, 41, 43, 0, 0, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 18, 0, 0, 20, 22, 0, 0, 24, 26, 0, 0, 28, 30, 32, 34, 0, 0, 0, 36, 0, 38, 40, 42, 44, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![2, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 2, 0, 0, 0, 1, 0, 0, 2, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![8300000, 2147483647, 2147483647, 8800000, 700000, 2147483647, 33800000, 900000, 14600000, 14437, -14092, 61100000, 2147483647, -23779, -3260, 2147483647, 1600000, 15150, -18076, 566000000, 80200000, 2147483647, 8600000, -26597, -9141, 10364, 1200000, 7734, 2007900000, 31100000, 125100000, 2147483647, 31953, 23752, 24500000, 6128, -22535, -28255, -6334, 6576, -17513, 28965, 2829, 18693, -9026, -4604, 4053].span()
};
    let tree_8 = xgb_inference::Tree {
    base_weights: array![-5392, -53505, -274, -25352, -20964, 7064, -14532, 22683, -21939, -77, 86172, -28356, -7043, -17496, 20258, -22557, 4142, 3912, 109826, 55564, -14215, 10270, -18446, -2998, 31847, 12454, 41090, 24935, 3136, -36135, 16690, 2478, -31971, 18242, 2380, -5943, -24727, 14464, -7227].span(),
    left_children: array![1, 3, 5, 0, 7, 9, 11, 13, 0, 15, 17, 0, 19, 21, 0, 0, 23, 0, 25, 27, 29, 0, 0, 31, 33, 0, 0, 0, 0, 35, 37, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 0, 8, 10, 12, 14, 0, 16, 18, 0, 20, 22, 0, 0, 24, 0, 26, 28, 30, 0, 0, 32, 34, 0, 0, 0, 0, 36, 38, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![2, 1, 0, 0, 2, 0, 0, 2, 0, 1, 2, 0, 2, 2, 0, 0, 2, 0, 0, 0, 2, 0, 0, 2, 1, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![6600000, 1300000, 2147483647, -25352, 2900000, 2147483647, 2147483647, 1500000, -21939, 2500000, 17300000, -28356, 7300000, 1100000, 20258, -22557, 105800000, 3912, 2147483647, 2147483647, 49500000, 10270, -18446, 87200000, 98100000, 12454, 41090, 24935, 3136, 31100000, 111100000, 2478, -31971, 18242, 2380, -5943, -24727, 14464, -7227].span()
};
    let tree_9 = xgb_inference::Tree {
    base_weights: array![-4606, -34816, 1523, -43017, 3119, 3899, -21633, -70969, -23309, 13264, -11641, -20194, 7918, -24599, -6173, -20125, -6943, -20672, 1727, 47178, 5087, 33406, -28031, 49764, -19718, 15452, 26785, -15997, 7589, -5811, 22394, 6509, -13772, -1737, 25494, -18532, 397, 19271, -6131, 20805, 1405].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 0, 13, 15, 0, 0, 17, 19, 0, 0, 0, 21, 0, 23, 25, 27, 29, 31, 33, 35, 37, 0, 0, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 0, 14, 16, 0, 0, 18, 20, 0, 0, 0, 22, 0, 24, 26, 28, 30, 32, 34, 36, 38, 0, 0, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![2, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![8300000, 2147483647, 2147483647, 900000, 700000, 2147483647, -21633, 2147483647, 2147483647, 13264, -11641, 25400000, 2147483647, -24599, -6173, -20125, 2900000, -20672, 696100000, 2147483647, 2147483647, 1500000, 1200000, 250100000, 1471100000, 2147483647, 26785, -15997, 2147483647, -5811, 22394, 6509, -13772, -1737, 25494, -18532, 397, 19271, -6131, 20805, 1405].span()
};
    let tree_10 = xgb_inference::Tree {
    base_weights: array![-3836, -44256, -109, -23412, -14643, -3105, 27395, 16819, -19172, -34260, 945, 44845, -18622, 33637, -5588, 4620, -47005, 11694, -17251, -5945, 61668, -17040, 8084, -4611, 19328, 11878, -12271, -24098, -16980, 4285, 70546, -53063, 777, 29707, 18373, 3877, -17785, -634, 24176, 4985, 25466, -1790, -22335, 20043, -5304, -7237, 12196].span(),
    left_children: array![1, 3, 5, 0, 7, 9, 11, 13, 0, 15, 17, 19, 21, 23, 0, 25, 27, 29, 31, 0, 33, 0, 0, 0, 0, 0, 0, 0, 35, 37, 39, 41, 43, 0, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 0, 8, 10, 12, 14, 0, 16, 18, 20, 22, 24, 0, 26, 28, 30, 32, 0, 34, 0, 0, 0, 0, 0, 0, 0, 36, 38, 40, 42, 44, 0, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![2, 1, 1, 0, 2, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 2, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![6600000, 1300000, 135200000, -23412, 2900000, 2147483647, 188500000, 2147483647, -19172, 696100000, 2147483647, 904500000, 250000000, 2147483647, -5588, 21600000, 48700000, 2147483647, 2147483647, -5945, 97000000, -17040, 8084, -4611, 19328, 11878, -12271, -24098, 113400000, 161500000, 17300000, 10700000, 2147483647, 29707, 148200000, 3877, -17785, -634, 24176, 4985, 25466, -1790, -22335, 20043, -5304, -7237, 12196].span()
};
    let tree_11 = xgb_inference::Tree {
    base_weights: array![-3058, -20534, -1211, -4236, 27668, -33344, -521, 69947, -3348, -19597, -11351, 8228, -16262, -2932, 38186, 26589, -24405, 9544, -28558, 3920, 72033, 16919, -23283, -3372, 47188, -13880, 552, -321, 17783, 27810, 6937, -4016, -24688, -2643, 28937].span(),
    left_children: array![1, 0, 3, 5, 7, 9, 11, 13, 15, 0, 17, 19, 21, 0, 0, 23, 0, 0, 25, 27, 29, 0, 31, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 0, 4, 6, 8, 10, 12, 14, 16, 0, 18, 20, 22, 0, 0, 24, 0, 0, 26, 28, 30, 0, 32, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 2, 0, 0, 1, 2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![400000, -20534, 135200000, 2147483647, 165800000, 25900000, 2147483647, 2147483647, 2147483647, -19597, 37900000, 2147483647, 700000, -2932, 38186, 65000000, -24405, 9544, 61100000, 142900000, 2147483647, 16919, 2147483647, -3372, 226400000, -13880, 552, -321, 17783, 27810, 6937, -4016, -24688, -2643, 28937].span()
};
    let tree_12 = xgb_inference::Tree {
    base_weights: array![-2074, -37328, 904, -62027, -1665, 8684, -5266, -21615, -6993, 6946, -9338, -4655, 73364, 63675, -10751, -10627, 48545, 30562, 104341, 32591, 721, -57150, 1483, 1246, -37570, 31300, -3375, -4108, 18052, 37863, 9403, -29749, -30339, 50148, -6217, -1650, 18557, 937, -14839, -944, -19175, -8656, 23951, -27657, 75].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 0, 0, 0, 0, 15, 17, 19, 21, 23, 25, 27, 29, 0, 0, 31, 33, 35, 37, 0, 0, 0, 0, 0, 0, 0, 39, 41, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 0, 0, 0, 0, 16, 18, 20, 22, 24, 26, 28, 30, 0, 0, 32, 34, 36, 38, 0, 0, 0, 0, 0, 0, 0, 40, 42, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![2, 1, 2, 1, 1, 2, 1, 0, 0, 0, 0, 1, 1, 0, 2, 2, 4, 0, 1, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![6600000, 3100000, 31100000, 1300000, 9800000, 24500000, 19200000, -21615, -6993, 6946, -9338, 33000000, 22200000, 2147483647, 48700000, 14400000, 100000, 2147483647, 33800000, 32591, 721, 2147483647, 39200000, 13700000, 2147483647, 31300, -3375, -4108, 18052, 37863, 9403, -29749, 2147483647, 25000000, 42100000, -1650, 18557, 937, -14839, -944, -19175, -8656, 23951, -27657, 75].span()
};
    let tree_13 = xgb_inference::Tree {
    base_weights: array![-1476, -18139, -63, -2470, 27167, -19437, 3318, 25041, -1507, -8311, -29664, 96313, -3094, 24956, -21748, -23529, 45324, 32924, 9647, -24346, 5833, 38623, -3877, 167, -14014, -902, 19418, 759, -20641, 16118, -625, -4565, 19501].span(),
    left_children: array![1, 0, 3, 5, 7, 9, 11, 0, 13, 15, 0, 17, 19, 21, 0, 23, 25, 0, 0, 27, 29, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 0, 4, 6, 8, 10, 12, 0, 14, 16, 0, 18, 20, 22, 0, 24, 26, 0, 0, 28, 30, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![400000, -18139, 148200000, 2147483647, 165800000, 98100000, 2147483647, 25041, 2147483647, 56400000, -29664, 29900000, 2147483647, 178600000, -21748, 25800000, 1758400000, 32924, 9647, 52100000, 2147483647, 904500000, -3877, 167, -14014, -902, 19418, 759, -20641, 16118, -625, -4565, 19501].span()
};
    let tree_14 = xgb_inference::Tree {
    base_weights: array![-1060, -34577, 1656, -9872, -20787, 2610, -9718, -32782, 9357, -1016, 16675, -1671, -16954, 3663, -54844, 24845, 3707, 666, 26965, -67349, 1324, -19919, 15234, -19247, 935, -3031, -23883, 18127, -527].span(),
    left_children: array![1, 3, 5, 7, 0, 9, 0, 11, 0, 13, 15, 0, 0, 17, 19, 0, 21, 23, 0, 25, 0, 0, 27, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 0, 10, 0, 12, 0, 14, 16, 0, 0, 18, 20, 0, 22, 24, 0, 26, 0, 0, 28, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![2, 2, 0, 1, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 1, 0, 1, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![6600000, 2900000, 2147483647, 8800000, -20787, 2147483647, -9718, 1600000, 9357, 2147483647, 7300000, -1671, -16954, 2147483647, 83600000, 24845, 1400000, 7600000, 26965, 3800000, 1324, -19919, 2147483647, -19247, 935, -3031, -23883, 18127, -527].span()
};
    let tree_15 = xgb_inference::Tree {
    base_weights: array![-1306, -14026, 3891, -39144, -85, 23733, -3885, -21664, -24891, 25090, -8897, -2666, 22923, -47491, 2898, 7495, -44511, 12283, -28361, -14031, 17458, -5167, -24340, 56845, -5732, -17413, 15460, 9581, -71298, -20196, 62395, -61188, -979, 19291, -25945, 7239, -8073, -10828, 85892, -32280, 5806, -2550, -26369, -13946, 10726, 24771, 4701, -1731, -22672, 8084, -9314, 11038, -13969, 29006, 7598, 11997, -13324, 224, 20732].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 0, 15, 0, 17, 19, 0, 21, 23, 25, 27, 29, 31, 33, 0, 35, 0, 37, 39, 0, 0, 0, 41, 43, 45, 47, 49, 0, 51, 0, 0, 0, 53, 55, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 0, 16, 0, 18, 20, 0, 22, 24, 26, 28, 30, 32, 34, 0, 36, 0, 38, 40, 0, 0, 0, 42, 44, 46, 48, 50, 0, 52, 0, 0, 0, 54, 56, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![2, 0, 2, 0, 0, 1, 2, 0, 0, 0, 1, 2, 0, 2, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![13700000, 2147483647, 31100000, 2147483647, 2147483647, 27600000, 38900000, -21664, 2147483647, 25090, 1600000, 30100000, 22923, 35500000, 29900000, 7600000, 3800000, 1100000, 3700000, 5000000, 17458, 19200000, -24340, 2147483647, 70900000, -17413, 15460, 9581, 7700000, 2147483647, 2147483647, 2147483647, 9500000, 19291, 2147483647, 7239, -8073, -10828, 2147483647, 41900000, 226400000, -2550, -26369, -13946, 10726, 24771, 4701, -1731, -22672, 8084, -9314, 11038, -13969, 29006, 7598, 11997, -13324, 224, 20732].span()
};
    let tree_16 = xgb_inference::Tree {
    base_weights: array![-769, -32175, 1685, -11715, -19099, -8075, 5082, -34854, 7228, -786, -21911, 56441, 1828, -17836, 736, 7345, -42339, 2145, 22394, -15408, 3623, -8484, 68646, -27260, 12427, 31451, -55, -4842, 13274, 7166, 24733, -2974, 18053, -9468, 2045].span(),
    left_children: array![1, 3, 5, 7, 0, 9, 11, 13, 0, 15, 0, 17, 19, 0, 0, 21, 23, 0, 0, 0, 25, 27, 29, 0, 0, 31, 33, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 0, 10, 12, 14, 0, 16, 0, 18, 20, 0, 0, 22, 24, 0, 0, 0, 26, 28, 30, 0, 0, 32, 34, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![2, 2, 0, 2, 0, 0, 0, 1, 0, 2, 0, 2, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![6600000, 2900000, 2147483647, 1500000, -19099, 2147483647, 2147483647, 3000000, 7228, 125100000, -21911, 27300000, 2147483647, -17836, 736, 82700000, 133500000, 2145, 22394, -15408, 2147483647, 2147483647, 58000000, -27260, 12427, 2147483647, 2147483647, -4842, 13274, 7166, 24733, -2974, 18053, -9468, 2045].span()
};
    let tree_17 = xgb_inference::Tree {
    base_weights: array![-710, -28727, 1373, -10568, -17669, 2848, -22028, -30987, 5637, 835, 40863, 13436, -57492, -16458, 602, 2435, -13550, 612, 21726, -21451, -2132, 314, 42763, 813, -22184, 18781, 1407].span(),
    left_children: array![1, 3, 5, 7, 0, 9, 11, 13, 0, 15, 17, 0, 19, 0, 0, 21, 0, 0, 0, 0, 0, 23, 25, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 0, 10, 12, 14, 0, 16, 18, 0, 20, 0, 0, 22, 0, 0, 0, 0, 0, 24, 26, 0, 0, 0, 0].span(),
    split_indices: array![2, 2, 0, 2, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![6600000, 2900000, 2147483647, 1500000, -17669, 2147483647, 700000, 3000000, 5637, 2147483647, 36200000, 13436, 30200000, -16458, 602, 2147483647, -13550, 612, 21726, -21451, -2132, 2147483647, 2147483647, 813, -22184, 18781, 1407].span()
};
    let tree_18 = xgb_inference::Tree {
    base_weights: array![-949, 430, -34685, -30913, 2237, 3281, -19569, -20136, 7847, 41596, 130, 13354, -7697, 17508, 16023, -21837, 2890, -4755, 12841, 51008, 677, 26756, 552, -6930, 656].span(),
    left_children: array![1, 3, 5, 7, 9, 0, 0, 0, 11, 13, 15, 0, 0, 0, 17, 0, 19, 0, 0, 21, 23, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 0, 0, 0, 12, 14, 16, 0, 0, 0, 18, 0, 20, 0, 0, 22, 24, 0, 0, 0, 0].span(),
    split_indices: array![0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 2, 2, 0, 0, 0, 0].span(),
    split_conditions: array![2147483647, 1100000, 700000, 2147483647, 1600000, 3281, -19569, -20136, 2147483647, 2147483647, 2500000, 13354, -7697, 17508, 2147483647, -21837, 3800000, -4755, 12841, 8400000, 8800000, 26756, 552, -6930, 656].span()
};
    let tree_19 = xgb_inference::Tree {
    base_weights: array![-910, -27582, 424, -4538, -16609, -15207, 2809, 6461, -8855, 4887, -56035, 27888, 149, -16260, 19251, -1468, -21553, 1682, -30395, -462, 41087, 11282, -4988, -18269, 2277, -7165, 9351, 18209, -2044, -238, 19066, -20734, -506].span(),
    left_children: array![1, 3, 5, 7, 0, 9, 11, 0, 0, 13, 15, 0, 17, 0, 19, 0, 0, 21, 23, 25, 27, 29, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 0, 10, 12, 0, 0, 14, 16, 0, 18, 0, 20, 0, 0, 22, 24, 26, 28, 30, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![2, 2, 1, 1, 0, 1, 1, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![2600000, 1600000, 3700000, 3200000, -16609, 1600000, 4000000, 6461, -8855, 2147483647, 8200000, 27888, 2147483647, -16260, 1100000, -1468, -21553, 30200000, 33800000, 2147483647, 2147483647, 24500000, 31600000, -18269, 2277, -7165, 9351, 18209, -2044, -238, 19066, -20734, -506].span()
};
    let tree_20 = xgb_inference::Tree {
    base_weights: array![-1141, -96, -10972, -6279, 5735, -1041, -22787, 40474, -201, -5488, 24458, -8698, 64552, 3739, -14253, -405, -21721, 28458, 27915, -2297, 21984, -8800, 2255, 18408, -6476, 1856, -10049].span(),
    left_children: array![1, 3, 0, 5, 7, 9, 0, 11, 13, 15, 0, 0, 17, 19, 0, 21, 0, 23, 0, 25, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 0, 6, 8, 10, 0, 12, 14, 16, 0, 0, 18, 20, 0, 22, 0, 24, 0, 26, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![2147483647, 2147483647, -10972, 2147483647, 2147483647, 2147483647, -22787, 7600000, 180500000, 2147483647, 24458, -8698, 42700000, 135200000, -14253, 13700000, -21721, 16600000, 27915, 60400000, 21984, -8800, 2255, 18408, -6476, 1856, -10049].span()
};
    let tree_21 = xgb_inference::Tree {
    base_weights: array![-991, -3123, 16291, -497, -48617, 63081, -9220, -2784, 43601, -25874, 4947, 27359, -2383, -27100, 14109, 932, -45699, 18552, -1163, 5395, -45832, -3339, 37782, -28245, 19997, -22716, 1056, -54, -16060, 21358, -6759].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 17, 0, 0, 0, 0, 19, 0, 21, 23, 0, 0, 0, 25, 27, 29, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 18, 0, 0, 0, 0, 20, 0, 22, 24, 0, 0, 0, 26, 28, 30, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![2, 2, 2, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![161500000, 125100000, 188500000, 105800000, 2147483647, 2147483647, 2147483647, 87200000, 2147483647, -25874, 4947, 27359, -2383, 107500000, 14109, 70900000, 2147483647, 18552, -1163, 5395, 250000000, 63400000, 61800000, -28245, 19997, -22716, 1056, -54, -16060, 21358, -6759].span()
};
    let tree_22 = xgb_inference::Tree {
    base_weights: array![-665, -17885, 1460, -34748, 10209, 2883, -28969, 3528, -51071, 912, 18734, 5742, -15706, -10366, 13427, -22744, -26861, 6582, -9640, -16647, -2403, 2744, 18632, -35839, 2245, 6551, -6694, -151, 13612, -361, -15695, 11980, -2978].span(),
    left_children: array![1, 3, 5, 7, 0, 9, 11, 13, 15, 17, 0, 0, 0, 0, 0, 0, 19, 21, 23, 0, 25, 27, 0, 29, 31, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 0, 10, 12, 14, 16, 18, 0, 0, 0, 0, 0, 0, 20, 22, 24, 0, 26, 28, 0, 30, 32, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 1, 1, 0, 0, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![2147483647, 128800000, 165800000, 696100000, 10209, 148200000, 116400000, 27600000, 1521100000, 2147483647, 18734, 5742, -15706, -10366, 13427, -22744, 47900000, 2147483647, 2147483647, -16647, 46400000, 161500000, 18632, 10700000, 2147483647, 6551, -6694, -151, 13612, -361, -15695, 11980, -2978].span()
};
    let tree_23 = xgb_inference::Tree {
    base_weights: array![-471, -10796, 3124, 288, -52030, 64551, -592, -9768, 42965, -79528, 3168, 22094, 6421, -34324, 2217, -20979, 18496, 23346, -8823, -6010, -28909, -61407, 10546, 17024, -243, 3255, -56754, 50354, -9459, -23009, -6882, -15872, 1724, -10972, 10103, -20051, -3190, -2283, 24778, 22215, -239].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 0, 0, 0, 21, 23, 25, 27, 0, 0, 0, 0, 29, 0, 0, 31, 33, 35, 37, 0, 0, 0, 0, 39, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 0, 0, 0, 22, 24, 26, 28, 0, 0, 0, 0, 30, 0, 0, 32, 34, 36, 38, 0, 0, 0, 0, 40, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 0, 0, 0, 1, 0, 0, 2, 1, 1, 0, 0, 0, 1, 0, 2, 2, 0, 0, 0, 0, 2, 0, 0, 0, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![2147483647, 2147483647, 2147483647, 2147483647, 33000000, 2147483647, 2147483647, 82700000, 58700000, 14300000, 3168, 22094, 6421, 66500000, 2147483647, 30100000, 178600000, 23346, -8823, -6010, -28909, 38900000, 10546, 17024, 2147483647, 13700000, 75100000, 58000000, -9459, -23009, -6882, -15872, 2147483647, -10972, 10103, -20051, -3190, -2283, 24778, 22215, -239].span()
};
    let tree_24 = xgb_inference::Tree {
    base_weights: array![-406, -10266, 618, 16231, -883, -17755, 858, 11590, -32, -12113, 1368, -3559, 1109].span(),
    left_children: array![1, 0, 3, 0, 5, 0, 7, 0, 9, 0, 11, 0, 0].span(),
    right_children: array![2, 0, 4, 0, 6, 0, 8, 0, 10, 0, 12, 0, 0].span(),
    split_indices: array![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0].span(),
    split_conditions: array![250100000, -10266, 696100000, 16231, 1471100000, -17755, 1680400000, 11590, 2147483647, -12113, 3100000, -3559, 1109].span()
};
    let tree_25 = xgb_inference::Tree {
    base_weights: array![-478, -2098, 16185, -53, -32911, 43663, -3457, -24707, 2058, -23902, 14099, 25137, -7237, 21073, -30122, 14762, -47250, -1265, 31622, 14365, -8512, -2513, 10786, -2990, -10756, -6684, 13590, -19475, -4326, 1905, -47674, 53013, -12005, -646, 7805, -28107, 13261, 21090, 1476].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 17, 0, 19, 0, 0, 21, 23, 25, 27, 29, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 35, 37, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 18, 0, 20, 0, 0, 22, 24, 26, 28, 30, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 36, 38, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![1, 1, 2, 0, 0, 1, 0, 0, 2, 0, 0, 0, 0, 2, 2, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![135200000, 107500000, 97000000, 2147483647, 2147483647, 215900000, 2147483647, 696100000, 105800000, -23902, 2147483647, 25137, -7237, 161500000, 188500000, 23700000, 75100000, 90200000, 2147483647, 14365, -8512, -2513, 10786, -2990, -10756, -6684, 13590, -19475, -4326, 52800000, 2147483647, 90300000, -12005, -646, 7805, -28107, 13261, 21090, 1476].span()
};
    let tree_26 = xgb_inference::Tree {
    base_weights: array![-619, 5141, -5995, -2980, 47276, -40017, 817, -356, -14638, 15684, 68273, -10045, -56108, 48282, -6690, -4800, 40180, 10994, -5052, 3804, 27734, -9215, 3275, -26695, -6086, 8638, 25241, -45922, -634, 2625, -25838, -9314, 23617, 3195, -6015, 19089, -13150, 2653, -21111, 39091, -6143, -532, 13116, -13591, 77, 1502, 14944, -17980, -101].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 0, 17, 19, 21, 23, 25, 27, 29, 31, 0, 0, 0, 0, 0, 0, 0, 33, 35, 0, 37, 39, 41, 43, 0, 0, 0, 0, 0, 0, 0, 0, 45, 47, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 0, 18, 20, 22, 24, 26, 28, 30, 32, 0, 0, 0, 0, 0, 0, 0, 34, 36, 0, 38, 40, 42, 44, 0, 0, 0, 0, 0, 0, 0, 0, 46, 48, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![2, 2, 2, 2, 0, 2, 1, 1, 0, 0, 2, 2, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![31100000, 24500000, 40700000, 23100000, 2147483647, 35500000, 29900000, 33000000, -14638, 2147483647, 27300000, 32500000, 2147483647, 25000000, 53700000, 14400000, 13700000, 10994, -5052, 3804, 27734, -9215, 3275, -26695, 35800000, 19200000, 25241, 37900000, 63400000, 13700000, 2147483647, -9314, 23617, 3195, -6015, 19089, -13150, 2653, -21111, 2147483647, 69200000, -532, 13116, -13591, 77, 1502, 14944, -17980, -101].span()
};
    let tree_27 = xgb_inference::Tree {
    base_weights: array![-428, 454, -9078, -412, 9064, -43655, 1294, -17664, -1303, 13839, -131, -22538, 1483, 1599, -18341, 14376, -242].span(),
    left_children: array![1, 3, 0, 5, 0, 7, 9, 0, 0, 0, 11, 13, 15, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 0, 6, 0, 8, 10, 0, 0, 0, 12, 14, 16, 0, 0, 0, 0].span(),
    split_indices: array![0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0].span(),
    split_conditions: array![2147483647, 2147483647, -9078, 900000, 9064, 2147483647, 1200000, -17664, -1303, 13839, 2500000, 1600000, 3800000, 1599, -18341, 14376, -242].span()
};
    let tree_28 = xgb_inference::Tree {
    base_weights: array![-477, -2134, 13944, 323, -36170, 17014, -4951, -1246, 36423, 3277, -55177, -20473, 11892, 969, -38566, 13372, 3274, -23641, -3972, 7102, -15711, -3455, 20811, -25269, 11358, -11476, 16973, 381, -22510, 18974, -565].span(),
    left_children: array![1, 3, 5, 7, 9, 0, 11, 13, 15, 0, 17, 19, 0, 21, 23, 0, 0, 0, 0, 25, 0, 27, 29, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 0, 12, 14, 16, 0, 18, 20, 0, 22, 24, 0, 0, 0, 0, 26, 0, 28, 30, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![2, 2, 2, 2, 1, 0, 0, 2, 1, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![164000000, 116400000, 188500000, 105800000, 86000000, 17014, 2147483647, 91700000, 56000000, 3277, 142900000, 2147483647, 11892, 52800000, 2147483647, 13372, 3274, -23641, -3972, 245800000, -15711, 45600000, 60400000, -25269, 11358, -11476, 16973, 381, -22510, 18974, -565].span()
};
    let tree_29 = xgb_inference::Tree {
    base_weights: array![-501, 3245, -9974, 778, 20868, -52373, 1596, 3362, -35292, -63785, -427, 29311, -9698, -168, 37730, -20474, 387, -5628, -21862, 49876, -7398, 9636, -19628, 1966, -15024, 14276, 18955, 17292, 5868, -40627, 10256, -111, 13750, 13149, -3435, -14540, -217, 12436, -7492].span(),
    left_children: array![1, 3, 5, 7, 0, 9, 11, 13, 15, 17, 0, 19, 21, 23, 25, 0, 0, 0, 0, 27, 0, 0, 29, 31, 0, 33, 0, 0, 0, 35, 37, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 0, 10, 12, 14, 16, 18, 0, 20, 22, 24, 26, 0, 0, 0, 0, 28, 0, 0, 30, 32, 0, 34, 0, 0, 0, 36, 38, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 2, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![2147483647, 2147483647, 2147483647, 2147483647, 20868, 66500000, 2147483647, 2147483647, 2147483647, 3800000, -427, 58000000, 700000, 2147483647, 37600000, -20474, 387, -5628, -21862, 39500000, -7398, 9636, 33000000, 2147483647, -15024, 2147483647, 18955, 17292, 5868, 29200000, 97000000, -111, 13750, 13149, -3435, -14540, -217, 12436, -7492].span()
};
    let tree_30 = xgb_inference::Tree {
    base_weights: array![-339, 714, -7975, -420, 24145, 864, -15399, -5019, 14249, -655, 16973, 955, -11963, -190, 8853].span(),
    left_children: array![1, 3, 0, 5, 7, 9, 0, 0, 0, 11, 0, 13, 0, 0, 0].span(),
    right_children: array![2, 4, 0, 6, 8, 10, 0, 0, 0, 12, 0, 14, 0, 0, 0].span(),
    split_indices: array![0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![2147483647, 2147483647, -7975, 2147483647, 3700000, 2147483647, -15399, -5019, 14249, 2147483647, 16973, 2147483647, -11963, -190, 8853].span()
};
    let tree_31 = xgb_inference::Tree {
    base_weights: array![-292, 2864, -8439, 801, 17684, -44896, 1056, 2978, -30841, -55491, -333, -6470, 14179, 517, 46216, -18612, 347, -4826, -19132, 7350, -52652, 2188, -13443, 17647, 2828, 37294, -7304, -25565, -1461, 5, 16478, -2613, 15129, -18464, 1585].span(),
    left_children: array![1, 3, 5, 7, 0, 9, 11, 13, 15, 17, 0, 19, 0, 21, 23, 0, 0, 0, 0, 25, 27, 29, 0, 0, 0, 31, 33, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 0, 10, 12, 14, 16, 18, 0, 20, 0, 22, 24, 0, 0, 0, 0, 26, 28, 30, 0, 0, 0, 32, 34, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 0, 0, 0, 0, 1, 2, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![2147483647, 2147483647, 2147483647, 2147483647, 17684, 66500000, 175100000, 2147483647, 2147483647, 3800000, -333, 58000000, 14179, 2147483647, 2147483647, -18612, 347, -4826, -19132, 2147483647, 2147483647, 2147483647, -13443, 17647, 2828, 8500000, 2147483647, -25565, -1461, 5, 16478, -2613, 15129, -18464, 1585].span()
};
    let tree_32 = xgb_inference::Tree {
    base_weights: array![-509, 858, -19768, -712, 30173, 15019, -42159, 662, -11916, 710, 15253, -4128, 10855, -19215, 583, -1459, 18130, 6037, -10952, 16403, 1884, -212, 13743, -1776, -14253, -4348, 14228].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 0, 0, 0, 0, 0, 0, 0, 17, 19, 21, 23, 0, 25, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 0, 0, 0, 0, 0, 0, 0, 18, 20, 22, 24, 0, 26, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 0, 1, 0, 2, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![2147483647, 2147483647, 700000, 2147483647, 36200000, 2147483647, 33800000, 161500000, -11916, 710, 15253, -4128, 10855, -19215, 583, 30200000, 188500000, 24500000, 2147483647, 16403, 2147483647, -212, 13743, -1776, -14253, -4348, 14228].span()
};
    let tree_33 = xgb_inference::Tree {
    base_weights: array![-221, -1616, 14779, -23079, 544, 41862, -4288, -32623, 1704, 5829, -9400, 20200, -805, 6892, -19302, -46168, 4660, 1547, 32935, -16667, -5138, -8982, 1312, 3772, -66469, 6150, -22310, 23580, -2646, 18022, -11308, -5276, -23926, 209, 11027, -10335, 7891, -643, -7625].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 0, 17, 19, 0, 0, 0, 21, 23, 0, 25, 27, 0, 29, 0, 0, 0, 31, 33, 0, 0, 35, 0, 37, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 0, 18, 20, 0, 0, 0, 22, 24, 0, 26, 28, 0, 30, 0, 0, 0, 32, 34, 0, 0, 36, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![1, 0, 2, 4, 0, 1, 0, 1, 0, 2, 2, 0, 0, 0, 1, 0, 0, 2, 1, 0, 2, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![135200000, 2147483647, 97000000, 100000, 2147483647, 199100000, 2147483647, 61100000, 1704, 105800000, 6600000, 20200, -805, 6892, 215900000, 630300000, 4660, 90200000, 90300000, -16667, 7000000, -8982, 1312, 3772, 27600000, 52800000, -22310, 23580, 2147483647, 18022, 2147483647, -5276, -23926, 209, 11027, -10335, 7891, -643, -7625].span()
};
    let tree_34 = xgb_inference::Tree {
    base_weights: array![-202, -7866, 600, 11760, -550, -14125, 720, 6111, -5165, 174, 50634, -22483, -792, 1491, -21854, 22972, 7636, -2701, 2968].span(),
    left_children: array![1, 0, 3, 0, 5, 0, 7, 9, 11, 13, 15, 0, 17, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 0, 4, 0, 6, 0, 8, 10, 12, 14, 16, 0, 18, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 0, 0, 0, 0, 0, 1, 2, 1, 2, 1, 0, 1, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![250100000, -7866, 696100000, 11760, 1471100000, -14125, 29900000, 41900000, 31600000, 35500000, 19200000, -22483, 68900000, 1491, -21854, 22972, 7636, -2701, 2968].span()
};
    let tree_35 = xgb_inference::Tree {
    base_weights: array![-454, -20552, 516, 2092, -12870, 5906, -4483, -944, 38398, -28827, 3612, 1665, -13007, 4258, 53971, 5312, -41707, 45503, -3444, -9831, 15054, 2890, -890, 20938, 1941, -22118, -24538, -3019, 29882, -21477, 1451, 789, -23096, 13910, 516, 6074, -11721, 9613, -10413, 15659, -1296].span(),
    left_children: array![1, 3, 5, 0, 0, 7, 9, 11, 13, 15, 17, 19, 0, 21, 23, 0, 25, 27, 29, 31, 33, 0, 0, 0, 0, 0, 35, 37, 0, 0, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 0, 0, 8, 10, 12, 14, 16, 18, 20, 0, 22, 24, 0, 26, 28, 30, 32, 34, 0, 0, 0, 0, 0, 36, 38, 0, 0, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![2, 1, 2, 0, 0, 2, 2, 2, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![2600000, 3200000, 31100000, 2092, -12870, 24500000, 49500000, 23100000, 2147483647, 19200000, 39200000, 7600000, -13007, 22400000, 2147483647, 5312, 2147483647, 2147483647, 42100000, 6100000, 9800000, 2890, -890, 20938, 1941, -22118, 2147483647, 2147483647, 29882, -21477, 45600000, 789, -23096, 13910, 516, 6074, -11721, 9613, -10413, 15659, -1296].span()
};
    let tree_36 = xgb_inference::Tree {
    base_weights: array![-533, -1393, 7879, 1633, -9892, -1592, 18541, 12736, -16978, -3699, 34603, -23010, 41827, -35952, 7133, 1636, -30153, 635, 14626, -19800, 8252, 22530, -5027, 14005, -67044, 24805, -17086, -559, 13916, -14198, 14300, -13068, 14814, -24527, -3444, -1782, 11974].span(),
    left_children: array![1, 3, 0, 5, 7, 9, 0, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 0, 0, 0, 0, 0, 0, 31, 33, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 0, 6, 8, 10, 0, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 0, 0, 0, 0, 0, 0, 32, 34, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![1, 2, 0, 2, 0, 1, 0, 0, 2, 1, 0, 1, 1, 1, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![226400000, 75800000, 7879, 70900000, 2147483647, 68900000, 18541, 2147483647, 142900000, 37900000, 2147483647, 58000000, 93800000, 61800000, 165800000, 49500000, 2147483647, 635, 14626, -19800, 8252, 22530, -5027, 2147483647, 2147483647, 104700000, -17086, -559, 13916, -14198, 14300, -13068, 14814, -24527, -3444, -1782, 11974].span()
};
    let tree_37 = xgb_inference::Tree {
    base_weights: array![-149, 1045, -17138, -9767, 2244, 4074, -38757, 11289, 947, -17692, 14, -19703, 2473, -39164, 7817, 43542, 189, 2869, -21695, 21463, 370, 731, -7571].span(),
    left_children: array![1, 3, 5, 0, 7, 0, 9, 0, 11, 0, 0, 13, 15, 17, 0, 19, 21, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 0, 8, 0, 10, 0, 12, 0, 0, 14, 16, 18, 0, 20, 22, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![2147483647, 900000, 700000, -9767, 1200000, 4074, 33800000, 11289, 2500000, -17692, 14, 2147483647, 3800000, 8400000, 7817, 8400000, 2147483647, 2869, -21695, 21463, 370, 731, -7571].span()
};
    let tree_38 = xgb_inference::Tree {
    base_weights: array![-311, -18363, 949, 923, -12983, 19471, -524, 7145, -5271, -13752, 42693, -29221, 2012, -15927, 9066, 23684, -390, -6606, -18416, 20519, -481, -10749, 6895, 1908, -22262, -123, 13642, -14113, -1138].span(),
    left_children: array![1, 3, 5, 7, 0, 9, 11, 0, 0, 13, 15, 17, 19, 0, 0, 0, 0, 21, 0, 0, 23, 0, 0, 25, 27, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 0, 10, 12, 0, 0, 14, 16, 18, 20, 0, 0, 0, 0, 22, 0, 0, 24, 0, 0, 26, 28, 0, 0, 0, 0].span(),
    split_indices: array![2, 0, 1, 2, 0, 0, 1, 0, 0, 1, 2, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0].span(),
    split_conditions: array![6600000, 2147483647, 1200000, 1600000, -12983, 2147483647, 3700000, 7145, -5271, 900000, 7000000, 2700000, 4000000, -15927, 9066, 23684, -390, 1500000, -18416, 20519, 2147483647, -10749, 6895, 2147483647, 33800000, -123, 13642, -14113, -1138].span()
};
    let tree_39 = xgb_inference::Tree {
    base_weights: array![-323, -14346, 1155, -34283, 2182, 35039, -403, -2565, -12491, 11913, -15794, 19449, -3894, -10316, 891, 5429, -34916, 13284, -726, -16648, 885, 1392, -22440, -188, 13441, -18045, -288].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 0, 0, 0, 15, 0, 0, 0, 17, 0, 19, 0, 21, 0, 0, 23, 25, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 0, 0, 0, 16, 0, 0, 0, 18, 0, 20, 0, 22, 0, 0, 24, 26, 0, 0, 0, 0].span(),
    split_indices: array![2, 1, 2, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0].span(),
    split_conditions: array![7100000, 1100000, 7700000, 2147483647, 1700000, 1000000, 1400000, -2565, -12491, 11913, 2147483647, 19449, -3894, -10316, 8400000, 5429, 7600000, 13284, 2147483647, -16648, 885, 2147483647, 18900000, -188, 13441, -18045, -288].span()
};
    let tree_40 = xgb_inference::Tree {
    base_weights: array![-325, -6806, 482, 8967, -458, -24014, 913, -18956, 5829, 27628, -364, 14939, -3339, -9877, 897, 14205, -229].span(),
    left_children: array![1, 0, 3, 0, 5, 7, 9, 0, 0, 11, 13, 0, 0, 0, 15, 0, 0].span(),
    right_children: array![2, 0, 4, 0, 6, 8, 10, 0, 0, 12, 14, 0, 0, 0, 16, 0, 0].span(),
    split_indices: array![2, 0, 2, 0, 2, 0, 2, 0, 0, 1, 2, 0, 0, 0, 2, 0, 0].span(),
    split_conditions: array![1500000, -6806, 2900000, 8967, 7100000, 2147483647, 7700000, -18956, 5829, 1000000, 8300000, 14939, -3339, -9877, 8600000, 14205, -229].span()
};
    let tree_41 = xgb_inference::Tree {
    base_weights: array![-244, 705, -7262, -428, 23888, -24071, 693, 14066, -5951, -16035, 3063, 23107, -840, -545, 14066, -16381, 798, 8484, -8199, 923, -8340].span(),
    left_children: array![1, 3, 0, 5, 7, 9, 11, 0, 0, 0, 0, 13, 15, 17, 0, 0, 19, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 0, 6, 8, 10, 12, 0, 0, 0, 0, 14, 16, 18, 0, 0, 20, 0, 0, 0, 0].span(),
    split_indices: array![0, 0, 0, 1, 2, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![2147483647, 2147483647, -7262, 1100000, 22300000, 2147483647, 1600000, 14066, -5951, -16035, 3063, 2147483647, 2500000, 1400000, 14066, -16381, 2147483647, 8484, -8199, 923, -8340].span()
};
    let tree_42 = xgb_inference::Tree {
    base_weights: array![-505, 639, -17186, -1032, 31276, 3612, -32208, -68, -8813, 602, 15666, -5889, 7330, -15986, 884, -1309, 21825, 535, -35851, 10098, -1469, -409, 10349, -17542, -751].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 0, 0, 0, 0, 0, 0, 0, 17, 19, 21, 23, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 0, 0, 0, 0, 0, 0, 0, 18, 20, 22, 24, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 0, 1, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![2147483647, 2147483647, 700000, 2147483647, 36200000, 2147483647, 33800000, 2147483647, -8813, 602, 15666, -5889, 7330, -15986, 884, 2147483647, 31100000, 2147483647, 12800000, 10098, -1469, -409, 10349, -17542, -751].span()
};
    let tree_43 = xgb_inference::Tree {
    base_weights: array![-475, -1632, 14543, 1286, -13141, 32687, -4667, -2186, 28231, -20466, 1813, 14550, 268, 616, -40319, 49720, -8373, 20310, -9662, -1665, 32092, -21740, 1543, 62521, 2378, -11478, -458, 216, -13595, -11001, 26057, 4352, 24221, 11751, -5324].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 0, 13, 15, 0, 17, 0, 0, 19, 21, 23, 0, 0, 25, 27, 29, 0, 0, 31, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 0, 14, 16, 0, 18, 0, 0, 20, 22, 24, 0, 0, 26, 28, 30, 0, 0, 32, 0, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![1, 1, 2, 1, 1, 1, 0, 1, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![148200000, 61800000, 188500000, 52800000, 68900000, 215900000, -4667, 45600000, 91700000, -20466, 73200000, 14550, 268, 42100000, 2147483647, 2147483647, -8373, 20310, 2147483647, 39200000, 62200000, -21740, 1543, 2147483647, 2378, -11478, 2147483647, 216, -13595, -11001, 26057, 4352, 24221, 11751, -5324].span()
};
    let tree_44 = xgb_inference::Tree {
    base_weights: array![-287, -10054, 1509, -11613, -1367, 12743, -204, 36914, -15725, 2605, -11337, 20695, -4596, -17538, -797, -3714, 14174, -19843, -15, 16682, -25863, -230, -16313, -11287, 21917, -8995, 9884, 14162, -2691, -18996, 9393, 9648, -1428, 8470, -8322, 3695, -13278].span(),
    left_children: array![1, 3, 5, 0, 7, 0, 9, 11, 13, 15, 17, 0, 0, 0, 19, 21, 23, 0, 25, 27, 29, 31, 0, 0, 33, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 0, 8, 0, 10, 12, 14, 16, 18, 0, 0, 0, 20, 22, 24, 0, 26, 28, 30, 32, 0, 0, 34, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![1, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 2, 0, 2, 1, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![3700000, 2147483647, 4000000, -11613, 2147483647, 12743, 2147483647, 8400000, 2147483647, 2147483647, 2147483647, 20695, -4596, -17538, 7700000, 2147483647, 7600000, -19843, 175100000, 2147483647, 9000000, 8300000, -16313, -11287, 209000000, 58000000, 9884, 14162, -2691, -18996, 9393, 9648, -1428, 8470, -8322, 3695, -13278].span()
};
    let tree_45 = xgb_inference::Tree {
    base_weights: array![-841, -5671, 3565, -49, -45941, 43742, -344, -7014, 37882, 1963, -21730, -1752, 20475, 34812, -4216, -1309, -30350, 17219, -1367, -11012, 21619, -19600, 2699, -7552, 38917, -52706, 6376, -50597, -6808, 18598, -4776, -596, -14006, -6262, 21736, 770, -24452, -22075, -515, 3612, -12416, -4630, 12566, -16744, 1353].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 17, 0, 0, 0, 0, 19, 21, 23, 25, 0, 0, 0, 0, 27, 29, 31, 33, 35, 0, 37, 39, 41, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 18, 0, 0, 0, 0, 20, 22, 24, 26, 0, 0, 0, 0, 28, 30, 32, 34, 36, 0, 38, 40, 42, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![1, 1, 1, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![24500000, 19200000, 28600000, 25400000, 30300000, 31600000, 22300000, 16600000, 2147483647, 1963, -21730, -1752, 20475, 13700000, 49800000, 13300000, 2147483647, 17219, -1367, -11012, 21619, 2147483647, 61800000, 9800000, 2147483647, 2147483647, 6376, 50700000, 2147483647, 2147483647, 68900000, -596, -14006, -6262, 21736, 770, -24452, -22075, -515, 3612, -12416, -4630, 12566, -16744, 1353].span()
};
    let tree_46 = xgb_inference::Tree {
    base_weights: array![-1129, 7768, -3359, -12584, 15571, -34111, -629, -2645, 33995, -9279, -18398, 17808, -3323, -10231, 8586, 66972, 1181, -10083, 4215, -16578, 818, 8810, -1812, 6909, 25041, -13072, 13082, -4529, -20396, 18948, -2371, 5426, -9192, -8254, 4374, -16497, 196].span(),
    left_children: array![1, 3, 5, 0, 7, 9, 11, 13, 15, 17, 0, 0, 19, 0, 21, 23, 25, 0, 0, 27, 29, 0, 31, 0, 0, 0, 0, 33, 0, 0, 35, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 0, 8, 10, 12, 14, 16, 18, 0, 0, 20, 0, 22, 24, 26, 0, 0, 28, 30, 0, 32, 0, 0, 0, 0, 34, 0, 0, 36, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 1, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 1, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![2147483647, 7600000, 2147483647, -12584, 2147483647, 2147483647, 2147483647, 25900000, 25400000, 2147483647, -18398, 17808, 2147483647, -10231, 37900000, 14900000, 69200000, -10083, 4215, 2147483647, 2147483647, 8810, 1680400000, 6909, 25041, -13072, 13082, 25400000, -20396, 18948, 2147483647, 5426, -9192, -8254, 4374, -16497, 196].span()
};
    let tree_47 = xgb_inference::Tree {
    base_weights: array![-1061, -2363, 13212, -176, -21031, 24362, -3144, -2620, 29152, -44280, 9190, 35295, -739, -157, -15876, 16945, 8629, -1993, -19397, 12162, -11165, 18833, -300, -4043, 13203, -5185, 9772, -471, -9909, -1761, 8888].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 0, 13, 15, 17, 19, 21, 0, 23, 0, 0, 25, 0, 0, 0, 0, 0, 0, 27, 29, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 0, 14, 16, 18, 20, 22, 0, 24, 0, 0, 26, 0, 0, 0, 0, 0, 0, 28, 30, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![1, 1, 2, 1, 2, 1, 0, 1, 1, 2, 2, 2, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![135200000, 90300000, 188500000, 68900000, 175100000, 215900000, -3144, 61800000, 73200000, 125100000, 209000000, 97000000, -739, 50700000, -15876, 16945, 97000000, -1993, -19397, 12162, -11165, 18833, -300, 44300000, 2147483647, -5185, 9772, -471, -9909, -1761, 8888].span()
};
    let tree_48 = xgb_inference::Tree {
    base_weights: array![-807, 2160, -6921, 38, 11942, -17924, -2401, -2569, 34433, 23221, -6814, 1152, -20020, 15825, -102, -528, 13860, -36969, 423, -3525, 27218, -18173, 3196, -45664, -1579, 19397, -5529, 801, -8436, 20337, -2217, 11193, -6442, -18328, -2217, 12329, -5831, -10037, 739].span(),
    left_children: array![1, 3, 5, 7, 0, 0, 9, 11, 13, 15, 17, 19, 21, 0, 0, 0, 0, 23, 25, 27, 29, 0, 31, 33, 0, 35, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 0, 0, 10, 12, 14, 16, 18, 20, 22, 0, 0, 0, 0, 24, 26, 28, 30, 0, 32, 34, 0, 36, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 0, 0, 2, 0, 0, 0, 2, 1, 0, 0, 1, 2, 0, 0, 0, 0, 1, 0, 1, 1, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![2147483647, 2147483647, 2147483647, 193100000, 11942, -17924, 2147483647, 87200000, 133500000, 2147483647, 2147483647, 55000000, 105800000, 15825, -102, -528, 13860, 61800000, 2147483647, 33800000, 61800000, -18173, 132200000, 2147483647, -1579, 58400000, 2147483647, 801, -8436, 20337, -2217, 11193, -6442, -18328, -2217, 12329, -5831, -10037, 739].span()
};
    let tree_49 = xgb_inference::Tree {
    base_weights: array![-699, -1530, 7000, -45, -18595, -1520, 11285, -201, -13480, 137, -24162, 5039, -5194, -2685, 31883, -12110, 3712, 14, -20443, 19563, 1212].span(),
    left_children: array![1, 3, 0, 5, 7, 9, 0, 11, 0, 13, 15, 0, 0, 17, 19, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 0, 6, 8, 10, 0, 12, 0, 14, 16, 0, 0, 18, 20, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![1, 2, 0, 1, 1, 1, 0, 0, 0, 1, 2, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![226400000, 188500000, 7000, 148200000, 133500000, 101900000, 11285, 2147483647, -13480, 68900000, 161500000, 5039, -5194, 61800000, 79700000, -12110, 3712, 14, -20443, 19563, 1212].span()
};
    let tree_50 = xgb_inference::Tree {
    base_weights: array![-562, -1554, 19033, -111, -28639, 15960, -5832, -1378, 10592, -18473, 3826, -10930, -184, 13972, -3529, -11118, 6879, -9609, -407].span(),
    left_children: array![1, 3, 5, 7, 9, 0, 0, 11, 0, 0, 0, 0, 13, 15, 17, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 0, 0, 12, 0, 0, 0, 0, 14, 16, 18, 0, 0, 0, 0].span(),
    split_indices: array![2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0].span(),
    split_conditions: array![245800000, 188500000, 2147483647, 164000000, 2147483647, 15960, -5832, 250100000, 10592, -18473, 3826, -10930, 2147483647, 7600000, 2147483647, -11118, 6879, -9609, -407].span()
};
    let tree_51 = xgb_inference::Tree {
    base_weights: array![-672, -14590, 716, -26112, 5960, 23058, -1407, 1671, -42779, 2874, 18511, -12142, 181, -6304, 6826, -16906, -4115, -9587, 21108, 9806, -1306, 14338, -3231, -21395, 403, -12311, 5299, 14765, -560].span(),
    left_children: array![1, 3, 5, 7, 0, 9, 11, 13, 15, 17, 0, 0, 19, 0, 0, 0, 0, 0, 21, 0, 23, 0, 0, 25, 27, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 0, 10, 12, 14, 16, 18, 0, 0, 20, 0, 0, 0, 0, 0, 22, 0, 24, 0, 0, 26, 28, 0, 0, 0, 0].span(),
    split_indices: array![0, 1, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0].span(),
    split_conditions: array![2147483647, 128800000, 2147483647, 696100000, 5960, 2147483647, 2147483647, 250100000, 75100000, 22200000, 18511, -12142, 2147483647, -6304, 6826, -16906, -4115, -9587, 55200000, 9806, 2147483647, 14338, -3231, 37900000, 2147483647, -12311, 5299, 14765, -560].span()
};
    let tree_52 = xgb_inference::Tree {
    base_weights: array![-380, -12245, 924, -11312, 520, 23790, -943, 8198, -17722, 3998, 16091, -10425, 376, -11681, 4984, 9663, -6983, 24618, -989, 16807, -3450, -10090, 209, 5642, -482].span(),
    left_children: array![1, 3, 5, 0, 7, 9, 11, 0, 13, 15, 0, 0, 17, 0, 0, 0, 0, 19, 21, 0, 0, 0, 23, 0, 0].span(),
    right_children: array![2, 4, 6, 0, 8, 10, 12, 0, 14, 16, 0, 0, 18, 0, 0, 0, 0, 20, 22, 0, 0, 0, 24, 0, 0].span(),
    split_indices: array![0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![2147483647, 25400000, 2147483647, -11312, 45600000, 2147483647, 2147483647, 8198, 128800000, 2147483647, 16091, -10425, 2147483647, -11681, 4984, 9663, -6983, 17900000, 2147483647, 16807, -3450, -10090, 2147483647, 5642, -482].span()
};
    let tree_53 = xgb_inference::Tree {
    base_weights: array![-205, -10877, 1209, 497, -8978, 14299, -595, -16252, 7642, -21338, 1125, 9252, -15722, 8862, -18072, 32090, -2163, -3865, 7225, 6564, -3731, 16174, 6626, -29904, 1577, -7159, 10103, 5150, -15521, 9628, -242].span(),
    left_children: array![1, 3, 5, 7, 0, 0, 9, 11, 0, 13, 15, 17, 0, 19, 0, 21, 23, 0, 0, 0, 0, 0, 25, 27, 29, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 0, 0, 10, 12, 0, 14, 16, 18, 0, 20, 0, 22, 24, 0, 0, 0, 0, 0, 26, 28, 30, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![2, 2, 2, 0, 0, 0, 1, 2, 0, 1, 1, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![7600000, 7000000, 8100000, 2147483647, -8978, 14299, 3700000, 2900000, 7642, 1600000, 6100000, 1500000, -15722, 2147483647, -18072, 2147483647, 13700000, -3865, 7225, 6564, -3731, 16174, 2147483647, 9700000, 16600000, -7159, 10103, 5150, -15521, 9628, -242].span()
};
    let tree_54 = xgb_inference::Tree {
    base_weights: array![-228, 830, -14910, -600, 25342, 1505, -9177, 489, -9102, -945, 15166, -1099, 18677, 817, -17662, 11310, -4113, -242, 10232, -11902, 601, -10447, 9990].span(),
    left_children: array![1, 3, 5, 7, 9, 0, 0, 11, 0, 0, 0, 13, 15, 17, 19, 0, 21, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 0, 0, 12, 0, 0, 0, 14, 16, 18, 20, 0, 22, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 0, 1, 0, 2, 0, 0, 2, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![2147483647, 2147483647, 700000, 2147483647, 36200000, 1505, -9177, 193100000, -9102, -945, 15166, 101900000, 2147483647, 88000000, 135200000, 11310, 2147483647, -242, 10232, -11902, 601, -10447, 9990].span()
};
    let tree_55 = xgb_inference::Tree {
    base_weights: array![-80, 587, -6548, -582, 19416, 635, -21485, -4106, 11662, -357, 9261, -10080, 935, -10254, 1036, 2804, -661].span(),
    left_children: array![1, 3, 0, 5, 7, 9, 11, 0, 0, 13, 0, 0, 0, 0, 15, 0, 0].span(),
    right_children: array![2, 4, 0, 6, 8, 10, 12, 0, 0, 14, 0, 0, 0, 0, 16, 0, 0].span(),
    split_indices: array![0, 0, 0, 0, 2, 0, 2, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0].span(),
    split_conditions: array![2147483647, 2147483647, -6548, 2147483647, 7100000, 2147483647, 36200000, -4106, 11662, 1100000, 9261, -10080, 935, -10254, 10700000, 2804, -661].span()
};
    let tree_56 = xgb_inference::Tree {
    base_weights: array![-185, -4964, 2939, 1038, -17257, 46179, -535, -4456, 12635, -16782, 6510, 1693, 19156, 14836, -5977, 4308, -17722, -10314, 20484, 24850, -1138, -41421, 2866, -9401, 11010, -31098, 11352, 53076, -6971, -13308, 15814, -70733, 6846, 34856, -6362, 9554, -1477, -15980, 6984, 20552, 3052, -12956, 4449, -27358, -8133, 16955, -8850, -10241, 606].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 0, 0, 17, 0, 0, 19, 21, 23, 25, 0, 27, 0, 29, 31, 33, 0, 35, 37, 0, 39, 0, 41, 0, 43, 0, 45, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 0, 0, 18, 0, 0, 20, 22, 24, 26, 0, 28, 0, 30, 32, 34, 0, 36, 38, 0, 40, 0, 42, 0, 44, 0, 46, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![2, 2, 1, 2, 1, 0, 0, 2, 0, 0, 2, 0, 0, 2, 1, 0, 1, 0, 2, 0, 0, 2, 1, 0, 0, 0, 0, 1, 0, 2, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![20500000, 12500000, 10700000, 12100000, 8000000, 2147483647, 2147483647, 8600000, 12635, -16782, 13700000, 1693, 19156, 25800000, 24500000, 2147483647, 15700000, -10314, 17700000, 24850, 2147483647, 41900000, 37900000, -9401, 2147483647, 2147483647, 11352, 15900000, -6971, 75100000, 15814, 30100000, 6846, 2147483647, 61200000, 9554, -1477, -15980, 6984, 20552, 3052, -12956, 4449, -27358, -8133, 16955, -8850, -10241, 606].span()
};
    let tree_57 = xgb_inference::Tree {
    base_weights: array![6, -18607, 949, 1546, -9300, 5472, -3512, -848, 35973, -38654, 2303, 1967, -9667, 2948, 45553, -15779, -16158, 22412, -3570, -1982, 12226, 2139, 18684, -8315, 487, -4993, 37923, -33995, 2101, 1287, -8550, 15943, -857, -20514, 4012, 11486, -856].span(),
    left_children: array![1, 3, 5, 0, 0, 7, 9, 11, 13, 15, 17, 19, 0, 0, 21, 23, 0, 25, 27, 29, 0, 0, 0, 0, 0, 0, 31, 33, 35, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 0, 0, 8, 10, 12, 14, 16, 18, 20, 0, 0, 22, 24, 0, 26, 28, 30, 0, 0, 0, 0, 0, 0, 32, 34, 36, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![2, 2, 2, 0, 0, 2, 2, 2, 0, 2, 1, 1, 0, 0, 2, 2, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![2600000, 1000000, 31100000, 1546, -9300, 24500000, 38900000, 22500000, 2147483647, 35500000, 39200000, 33000000, -9667, 2948, 27300000, 32500000, -16158, 2147483647, 61200000, 14600000, 12226, 2139, 18684, -8315, 487, -4993, 2147483647, 56400000, 45600000, 1287, -8550, 15943, -857, -20514, 4012, 11486, -856].span()
};
    let tree_58 = xgb_inference::Tree {
    base_weights: array![-177, -13990, 712, 7016, -11008, 15199, -1106, 2928, 281, -741, 13717, -8104, 2383, -11845, 18452, -2081, -16568, 15143, -219, 9517, -815, 17130, -15109, -14154, 2318, -4438, 17567, -19147, -367, -1244, 4073].span(),
    left_children: array![1, 3, 5, 7, 0, 9, 11, 0, 0, 13, 0, 15, 17, 0, 19, 21, 0, 0, 23, 0, 0, 25, 27, 0, 29, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 0, 10, 12, 0, 0, 14, 0, 16, 18, 0, 20, 22, 0, 0, 24, 0, 0, 26, 28, 0, 30, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![1471100000, 566000000, 2147483647, 17700000, -11008, 58000000, 2147483647, 2928, 281, 2147483647, 13717, 2147483647, 2147483647, -11845, 2147483647, 19200000, -16568, 15143, 2147483647, 9517, -815, 13600000, 25400000, -14154, 49500000, -4438, 17567, -19147, -367, -1244, 4073].span()
};
    let tree_59 = xgb_inference::Tree {
    base_weights: array![-415, 1828, -6905, -568, 12967, -13252, -2055, 1498, -10268, 3832, -24884, -1625, 25003, -4739, 29996, -14340, 794, 2924, -21095, -6038, 55941, -21387, 17206, 15144, -2791, -616, 8836, -2051, -14429, 12131, -15589, 24820, 763, 9133, -14490, -5385, 11873].span(),
    left_children: array![1, 3, 5, 7, 0, 0, 9, 11, 0, 13, 15, 17, 19, 21, 23, 0, 0, 25, 27, 29, 31, 33, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 0, 0, 10, 12, 0, 14, 16, 18, 20, 22, 24, 0, 0, 26, 28, 30, 32, 34, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![2, 2, 1, 2, 0, 0, 0, 2, 0, 0, 1, 2, 0, 2, 2, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![75800000, 70900000, 46400000, 63400000, 12967, -13252, 2147483647, 49500000, -10268, 2147483647, 104700000, 31100000, 2147483647, 142900000, 188500000, -14340, 794, 24500000, 2147483647, 2147483647, 39200000, 2147483647, 2147483647, 15144, -2791, -616, 8836, -2051, -14429, 12131, -15589, 24820, 763, 9133, -14490, -5385, 11873].span()
};
    let tree_60 = xgb_inference::Tree {
    base_weights: array![-286, -11195, 1016, -11154, -160, 24713, -680, -17722, 7339, 2325, 10627, -8884, 453, -10235, 2688, 1772, -7653, 272, 8972, 4045, -597].span(),
    left_children: array![1, 3, 5, 0, 7, 9, 11, 13, 0, 0, 0, 0, 15, 0, 0, 17, 0, 19, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 0, 8, 10, 12, 14, 0, 0, 0, 0, 16, 0, 0, 18, 0, 20, 0, 0, 0].span(),
    split_indices: array![0, 2, 0, 0, 4, 0, 0, 2, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0].span(),
    split_conditions: array![2147483647, 17300000, 2147483647, -11154, 100000, 2147483647, 2147483647, 82700000, 7339, 2325, 10627, -8884, 165800000, -10235, 2688, 135200000, -7653, 2147483647, 8972, 4045, -597].span()
};
    let tree_61 = xgb_inference::Tree {
    base_weights: array![-253, 1427, -8849, -529, 24795, -21443, 6958, 1268, -12378, 35186, -568, -36489, -27, 8024, -9471, -7062, 5625, 3436, 13919, -997, -14504, 9400, -9483, -8846, 4710, 4166, -33975, 15967, 2572, 8364, -1765, -14893, -1762, -2176, 4286].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 0, 17, 0, 19, 21, 0, 23, 25, 27, 0, 0, 0, 0, 0, 0, 0, 0, 29, 31, 0, 33, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 0, 18, 0, 20, 22, 0, 24, 26, 28, 0, 0, 0, 0, 0, 0, 0, 0, 30, 32, 0, 34, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![1, 1, 1, 1, 0, 2, 1, 0, 0, 0, 0, 1, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![90300000, 68900000, 135200000, 61800000, 2147483647, 175100000, 165800000, 2147483647, -12378, 2147483647, -568, 101900000, 205600000, 8024, 226400000, 2147483647, 2147483647, 3436, 13919, -997, -14504, 9400, -9483, -8846, 4710, 10600000, 25400000, 15967, 20500000, 8364, -1765, -14893, -1762, -2176, 4286].span()
};
    let tree_62 = xgb_inference::Tree {
    base_weights: array![-213, 5332, -2979, -1150, 38477, -21597, 850, 5465, -12932, 3751, 13154, 39303, -1969, -6766, 29709, 200, 17700, -31709, 953, 4303, -13818, 44709, -783, 3424, -20177, 18322, -2208, -9860, 5308, 3966, 21684, 8277, -8096, -7038, 529].span(),
    left_children: array![1, 3, 5, 7, 9, 0, 11, 13, 0, 0, 0, 15, 17, 19, 21, 0, 0, 23, 25, 27, 0, 29, 31, 0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 0, 12, 14, 0, 0, 0, 16, 18, 20, 22, 0, 0, 24, 26, 28, 0, 30, 32, 0, 0, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![1, 2, 1, 2, 2, 0, 1, 2, 0, 0, 0, 0, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![10700000, 18000000, 12800000, 14400000, 21900000, -21597, 14600000, 11000000, -12932, 3751, 13154, 2147483647, 14500000, 8600000, 12500000, 200, 17700, 9700000, 17700000, 2147483647, -13818, 12100000, 2147483647, 3424, -20177, 18322, 24500000, -9860, 5308, 3966, 21684, 8277, -8096, -7038, 529].span()
};
    let tree_63 = xgb_inference::Tree {
    base_weights: array![-250, 2292, -5115, -869, 23658, -35899, -164, 2559, -20196, 33876, -3303, -18997, 1984, 13183, -9744, -2812, 17208, -1855, -17744, 10263, 16569, 15923, -1863, -27413, 2759, 4036, -34412, -1978, 18695, -24055, 10783, 13401, -6426, -14710, 9836, 7184, -46451, 11233, -7457, -390, 9776, 6032, -16040, 10231, -9576, -17153, 3778, 6318, -9060, -18380, 488, 13133, -2420].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 0, 0, 0, 21, 23, 25, 27, 29, 0, 31, 0, 0, 33, 35, 37, 39, 41, 43, 0, 45, 0, 0, 0, 47, 0, 0, 49, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 0, 0, 0, 22, 24, 26, 28, 30, 0, 32, 0, 0, 34, 36, 38, 40, 42, 44, 0, 46, 0, 0, 0, 48, 0, 0, 50, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![1, 2, 1, 2, 2, 2, 2, 1, 0, 1, 0, 0, 0, 1, 2, 1, 0, 0, 0, 2, 0, 0, 2, 0, 0, 2, 2, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![45600000, 50700000, 52800000, 34100000, 72500000, 67600000, 91700000, 15700000, 2147483647, 42100000, -3303, -18997, 1984, 58000000, 142900000, 10700000, 2147483647, 2147483647, -17744, 56200000, 16569, 15923, 80200000, 2147483647, 2147483647, 18000000, 10100000, 2147483647, 18695, 40700000, 10783, 13401, -6426, 31100000, 9836, 7184, 2147483647, 188500000, -7457, -390, 9776, 6032, -16040, 10231, -9576, -17153, 3778, 6318, -9060, -18380, 488, 13133, -2420].span()
};
    let tree_64 = xgb_inference::Tree {
    base_weights: array![-56, -14237, 1665, 4308, -23829, 3054, -14756, -7905, 8510, -31153, -896, 1367, 27733, -10317, 3621, -976, -13684, 2873, -10305, 1601, 12767, 7370, -5851, 1049, 21904, 1897, -2553, 12805, -304].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 0, 0, 15, 0, 17, 19, 0, 21, 0, 0, 23, 0, 0, 0, 0, 0, 25, 27, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 0, 0, 16, 0, 18, 20, 0, 22, 0, 0, 24, 0, 0, 0, 0, 0, 26, 28, 0, 0, 0, 0].span(),
    split_indices: array![0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0].span(),
    split_conditions: array![2147483647, 696100000, 2147483647, 27600000, 61100000, 2147483647, 2147483647, -7905, 8510, 37900000, -896, 2147483647, 36200000, -10317, 2147483647, -976, -13684, 193100000, -10305, 1601, 12767, 7370, -5851, 33800000, 2147483647, 1897, -2553, 12805, -304].span()
};
    let tree_65 = xgb_inference::Tree {
    base_weights: array![-179, -12282, 1265, -9793, -3078, 7064, 366, 5978, -12601, 1392, -16555, -10055, 2569, 6, 11532, -10206, 1610, 5399, -3802, 1530, -23653, -163, 5034, -653, -9590].span(),
    left_children: array![1, 3, 5, 0, 7, 0, 9, 0, 11, 13, 15, 0, 17, 19, 0, 0, 0, 0, 0, 21, 23, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 0, 8, 0, 10, 0, 12, 14, 16, 0, 18, 20, 0, 0, 0, 0, 0, 22, 24, 0, 0, 0, 0].span(),
    split_indices: array![0, 2, 0, 0, 0, 0, 2, 0, 0, 2, 1, 0, 0, 2, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0].span(),
    split_conditions: array![2147483647, 17300000, 2147483647, -9793, 343600000, 7064, 209000000, 5978, 1471100000, 193100000, 118100000, -10055, 2035000000, 151600000, 11532, -10206, 1610, 5399, -3802, 68900000, 128800000, -163, 5034, -653, -9590].span()
};
    let tree_66 = xgb_inference::Tree {
    base_weights: array![-247, -6556, 489, 9431, -482, -17904, 1016, -11208, -4621, 7200, 216, 4380, -16582, 2505, -7161, -8939, 1215, -129, 9955, -14331, 986].span(),
    left_children: array![1, 0, 3, 0, 5, 7, 9, 0, 11, 0, 13, 0, 15, 17, 19, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 0, 4, 0, 6, 8, 10, 0, 12, 0, 14, 0, 16, 18, 20, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![250100000, -6556, 696100000, 9431, 2147483647, 29200000, 2147483647, -11208, 75800000, 7200, 60400000, 4380, 58000000, 52800000, 68900000, -8939, 1215, -129, 9955, -14331, 986].span()
};
    let tree_67 = xgb_inference::Tree {
    base_weights: array![-314, 1461, -9583, -297, 22429, -21503, 5359, 991, -9691, 10748, -214, -11773, -4826, -11961, 20338, -593, 19090, 3937, -8075, 3967, -8918, 11278, -2256, 1592, -20223, 11886, -3517, -419, 6511, -13307, 1417].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 0, 0, 0, 0, 17, 19, 21, 23, 25, 0, 0, 0, 0, 0, 0, 27, 29, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 0, 0, 0, 0, 18, 20, 22, 24, 26, 0, 0, 0, 0, 0, 0, 28, 30, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![1, 1, 1, 1, 1, 2, 0, 1, 0, 0, 0, 0, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![90300000, 68900000, 135200000, 61800000, 79700000, 142900000, 2147483647, 56400000, -9691, 10748, -214, -11773, 205600000, 2147483647, 180500000, 45600000, 2147483647, 3937, -8075, 3967, -8918, 11278, -2256, 50700000, 2147483647, 11886, -3517, -419, 6511, -13307, 1417].span()
};
    let tree_68 = xgb_inference::Tree {
    base_weights: array![-359, -9172, 1063, -9689, 1443, 9974, -399, 11667, -14209, -14895, 1411, -33484, 12727, 1409, -15225, 12694, -610, -13869, -2269, 8656, -3024, -15611, 7924, -24074, 1063, 145, -8702, 417, -12248, 3467, -920].span(),
    left_children: array![1, 3, 5, 0, 7, 0, 9, 0, 11, 13, 15, 17, 19, 21, 0, 0, 23, 0, 0, 0, 0, 25, 0, 27, 29, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 0, 8, 0, 10, 0, 12, 14, 16, 18, 20, 22, 0, 0, 24, 0, 0, 0, 0, 26, 0, 28, 30, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 1, 0, 0, 1, 0, 0, 0, 2, 0, 0, 4, 2, 2, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![2147483647, 22200000, 2147483647, -9689, 30200000, 9974, 2147483647, 11667, 82700000, 2147483647, 2147483647, 100000, 175100000, 47900000, -15225, 12694, 6600000, -13869, -2269, 8656, -3024, 25800000, 7924, 2147483647, 6100000, 145, -8702, 417, -12248, 3467, -920].span()
};
    let tree_69 = xgb_inference::Tree {
    base_weights: array![-454, 519, -13030, -734, 21372, 1905, -8732, 499, -9791, 770, 10664, -641, 17520, -19089, 1443, 10131, -144, -9746, 1162, 9321, -103].span(),
    left_children: array![1, 3, 5, 7, 9, 0, 0, 11, 0, 0, 0, 13, 15, 17, 19, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 0, 0, 12, 0, 0, 0, 14, 16, 18, 20, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![2147483647, 2147483647, 700000, 2147483647, 36200000, 1905, -8732, 2147483647, -9791, 770, 10664, 2500000, 1800000, 8300000, 3800000, 10131, -144, -9746, 1162, 9321, -103].span()
};
    let tree_70 = xgb_inference::Tree {
    base_weights: array![-273, -5683, 360, 9004, -572, -7447, 539, 3086, -5251, 1181, 11632, -10679, 1107, 814, -8758, 2341, -4963].span(),
    left_children: array![1, 0, 3, 0, 5, 0, 7, 9, 11, 13, 0, 0, 15, 0, 0, 0, 0].span(),
    right_children: array![2, 0, 4, 0, 6, 0, 8, 10, 12, 14, 0, 0, 16, 0, 0, 0, 0].span(),
    split_indices: array![0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0].span(),
    split_conditions: array![250100000, -5683, 696100000, 9004, 2007900000, -7447, 2147483647, 2147483647, 2147483647, 155400000, 11632, -10679, 58000000, 814, -8758, 2341, -4963].span()
};
    let tree_71 = xgb_inference::Tree {
    base_weights: array![-413, -1352, 18153, -37, -25371, 11495, -2528, -1019, 8072, -15272, 2859, -7873, -144, 1121, -16500, -313, 8531, 2782, -8584].span(),
    left_children: array![1, 3, 5, 7, 9, 0, 0, 11, 0, 0, 0, 0, 13, 15, 17, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 0, 0, 12, 0, 0, 0, 0, 14, 16, 18, 0, 0, 0, 0].span(),
    split_indices: array![2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0].span(),
    split_conditions: array![245800000, 188500000, 2147483647, 164000000, 2147483647, 11495, -2528, 250100000, 8072, -15272, 2859, -7873, 113400000, 88000000, 86000000, -313, 8531, 2782, -8584].span()
};
    let tree_72 = xgb_inference::Tree {
    base_weights: array![-307, -1107, 15640, 16, -21935, 9867, -2121, -1137, 19179, -13272, 2382, 394, -25127, 9072, -577, -1342, 20456, -10635, 136, 112, -9026, 13622, -341].span(),
    left_children: array![1, 3, 5, 7, 9, 0, 0, 11, 13, 0, 0, 15, 17, 0, 0, 19, 21, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 0, 0, 12, 14, 0, 0, 16, 18, 0, 0, 20, 22, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![2, 2, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 2, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![245800000, 188500000, 2147483647, 139800000, 2147483647, 9867, -2121, 101900000, 199100000, -13272, 2382, 68900000, 161500000, 9072, -577, 60400000, 79700000, -10635, 136, 112, -9026, 13622, -341].span()
};
    let tree_73 = xgb_inference::Tree {
    base_weights: array![-232, -4770, 2394, 658, -18495, 39880, -582, 14542, -10255, 2386, 15720, -27899, 2057, 790, 21211, -20050, 689, 1998, -17450, 14884, -675, -34086, 23337, -7157, 12135, -21960, 3389, 2663, -19562, 12549, 2305, 1417, -11360, 7748, -11877, 14663, -229].span(),
    left_children: array![1, 3, 5, 7, 0, 9, 11, 13, 15, 0, 0, 17, 19, 21, 0, 0, 23, 0, 0, 0, 25, 27, 29, 31, 0, 33, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 0, 10, 12, 14, 16, 0, 0, 18, 20, 22, 0, 0, 24, 0, 0, 0, 26, 28, 30, 32, 0, 34, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![1, 1, 1, 0, 0, 0, 2, 0, 0, 0, 0, 2, 2, 2, 0, 0, 2, 0, 0, 0, 1, 2, 2, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![12800000, 10700000, 14600000, 2147483647, -18495, 2147483647, 14500000, 2147483647, 2147483647, 2386, 15720, 9700000, 17700000, 11300000, 21211, -20050, 18900000, 1998, -17450, 14884, 24500000, 2900000, 12300000, 11100000, 12135, 2147483647, 28600000, 2663, -19562, 12549, 2305, 1417, -11360, 7748, -11877, 14663, -229].span()
};
    let tree_74 = xgb_inference::Tree {
    base_weights: array![-156, -16514, 703, -8286, 1407, 6835, -379, 902, -9514, -413, 7746, 1756, -38372, -34, 3595, -16061, -1209].span(),
    left_children: array![1, 3, 5, 0, 0, 0, 7, 9, 0, 11, 0, 13, 15, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 0, 0, 0, 8, 10, 0, 12, 0, 14, 16, 0, 0, 0, 0].span(),
    split_indices: array![2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0].span(),
    split_conditions: array![2600000, 2147483647, 6800000, -8286, 1407, 6835, 2147483647, 2147483647, -9514, 2147483647, 7746, 2147483647, 36200000, -34, 3595, -16061, -1209].span()
};
    let tree_75 = xgb_inference::Tree {
    base_weights: array![-383, 675, -13864, -569, 21776, -9531, 3319, 958, -8358, 9257, 1669, -4391, 6047, -17066, 3046, 11158, -46458, 33173, 747, -2623, 9616, -3485, -17306, 16540, -236, -18039, 980].span(),
    left_children: array![1, 3, 5, 7, 9, 0, 11, 13, 0, 0, 0, 0, 0, 15, 17, 19, 21, 23, 25, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 0, 12, 14, 0, 0, 0, 0, 0, 16, 18, 20, 22, 24, 26, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 0, 0, 0, 1, 0, 2, 2, 0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![2147483647, 2147483647, 2147483647, 2147483647, 3800000, -9531, 7100000, 8000000, -8358, 9257, 1669, -4391, 6047, 2147483647, 2700000, 7600000, 1000000, 8600000, 8800000, -2623, 9616, -3485, -17306, 16540, -236, -18039, 980].span()
};
    let tree_76 = xgb_inference::Tree {
    base_weights: array![-647, -4722, 51, 18535, -1208, -847, 10232, 731, -18448, -802, 9128, -32812, 5799, -23242, 949, -18018, 2026, -2497, 4890, -604, -10704, 10329, -130].span(),
    left_children: array![1, 0, 3, 5, 7, 0, 0, 9, 11, 13, 0, 15, 17, 19, 21, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 0, 4, 6, 8, 0, 0, 10, 12, 14, 0, 16, 18, 20, 22, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 2, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![600000, -4722, 1200000, 2147483647, 2147483647, -847, 10232, 2147483647, 2147483647, 2500000, 9128, 48700000, 33800000, 8400000, 3200000, -18018, 2026, -2497, 4890, -604, -10704, 10329, -130].span()
};
    let tree_77 = xgb_inference::Tree {
    base_weights: array![-521, 473, -13225, -709, 20642, 1010, -8013, 296, -8223, 7974, 2126, -1806, 9217, 193, -12090, 32556, -5513, -425, 11017, 3512, 14779, -6990, 854].span(),
    left_children: array![1, 3, 5, 7, 9, 0, 0, 11, 0, 0, 0, 13, 15, 17, 0, 19, 21, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 0, 0, 12, 0, 0, 0, 14, 16, 18, 0, 20, 22, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 0, 1, 0, 1, 0, 0, 2, 0, 0, 0, 2, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![2147483647, 2147483647, 700000, 2147483647, 3800000, 1010, -8013, 98600000, -8223, 7974, 2126, 87200000, 90300000, 80200000, -12090, 2147483647, 142900000, -425, 11017, 3512, 14779, -6990, 854].span()
};
    let tree_78 = xgb_inference::Tree {
    base_weights: array![-298, 376, -4585, 7851, -472, -10780, 1143, 89, 7146, 2798, -9498, 376, 10276, -8914, -818].span(),
    left_children: array![1, 3, 0, 0, 5, 0, 7, 9, 0, 11, 13, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 0, 0, 6, 0, 8, 10, 0, 12, 14, 0, 0, 0, 0].span(),
    split_indices: array![0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0].span(),
    split_conditions: array![2147483647, 500000, -4585, 7851, 1100000, -10780, 2147483647, 2147483647, 7146, 2147483647, 10200000, 376, 10276, -8914, -818].span()
};
    let tree_79 = xgb_inference::Tree {
    base_weights: array![-228, -8567, 1087, -8594, 794, 8328, -159, 9505, -12307, 842, -5849, -29522, 11710, -657, 23900, -12323, -1796, 7185, -1922, -15103, 1237, -886, 11636, -8265, 2233, 10123, -150].span(),
    left_children: array![1, 3, 5, 0, 7, 0, 9, 0, 11, 13, 0, 15, 17, 19, 21, 0, 0, 0, 0, 23, 25, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 0, 8, 0, 10, 0, 12, 14, 0, 16, 18, 20, 22, 0, 0, 0, 0, 24, 26, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 1, 0, 0, 1, 0, 1, 0, 2, 2, 0, 4, 2, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![2147483647, 22200000, 2147483647, -8594, 30200000, 8328, 165800000, 9505, 82700000, 193100000, -5849, 100000, 125100000, 2147483647, 104700000, -12323, -1796, 7185, -1922, 37900000, 2147483647, -886, 11636, -8265, 2233, 10123, -150].span()
};
    let tree_80 = xgb_inference::Tree {
    base_weights: array![-36, 812, -11072, -257, 18707, -8241, 3889, 3500, -6192, 7588, 1615, 5556, -4112, -1066, 26807, -18658, -721, 2035, -9781, 332, 44159, 8279, -5048, -591, 5236, 7454, -7260, 886, 22438, 643, -13639].span(),
    left_children: array![1, 3, 5, 7, 9, 0, 11, 13, 15, 0, 0, 0, 0, 17, 19, 0, 21, 23, 0, 25, 27, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 0, 12, 14, 16, 0, 0, 0, 0, 18, 20, 0, 22, 24, 0, 26, 28, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 0, 0, 1, 2, 0, 0, 2, 1, 0, 0, 0, 0, 2, 0, 0, 1, 2, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![2147483647, 2147483647, 2147483647, 39200000, 9900000, -8241, 2147483647, 40700000, 42100000, 7588, 1615, 5556, -4112, 34100000, 2147483647, -18658, 45600000, 24500000, -9781, 55200000, 49500000, 8279, 2147483647, -591, 5236, 7454, -7260, 886, 22438, 643, -13639].span()
};
    let tree_81 = xgb_inference::Tree {
    base_weights: array![-94, -3573, 2793, -535, -12116, 27319, -1540, -3496, 11249, -5869, 44845, -12107, 1727, 228, -14412, 285, 17824, 9316, -1176, -16404, 5077, 2412, -18982, 3772, -9017, 15093, -367, -2848, 4206, -10759, -1364].span(),
    left_children: array![1, 3, 5, 7, 0, 9, 11, 13, 0, 0, 15, 0, 17, 19, 0, 0, 0, 0, 21, 23, 25, 27, 29, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 0, 10, 12, 14, 0, 0, 16, 0, 18, 20, 0, 0, 0, 0, 22, 24, 26, 28, 30, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 2, 2, 1, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![2147483647, 2147483647, 2147483647, 2147483647, -12116, 7600000, 2147483647, 2147483647, 11249, -5869, 12300000, -12107, 2147483647, 13700000, -14412, 285, 17824, 9316, 111100000, 7700000, 10600000, 10600000, 175100000, 3772, -9017, 15093, -367, -2848, 4206, -10759, -1364].span()
};
    let tree_82 = xgb_inference::Tree {
    base_weights: array![-221, 3385, -4189, 527, 28622, -28982, -54, 2790, -7674, -953, 15411, -35911, -1874, 17458, -4801, -1159, 27667, -3386, -12756, -553, 13544, -32213, 1261, 2048, -11798, -130, 12280, 7955, -18100, -18180, 3431, 7044, -13882, -482, 12038, -9716, 2239, -5940, 3698, -13716, 1110].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 0, 0, 0, 17, 0, 19, 21, 23, 25, 0, 0, 27, 0, 29, 31, 33, 0, 0, 0, 0, 35, 0, 0, 37, 39, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 0, 0, 0, 18, 0, 20, 22, 24, 26, 0, 0, 28, 0, 30, 32, 34, 0, 0, 0, 0, 36, 0, 0, 38, 40, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![2, 2, 2, 4, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 2, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![31100000, 27300000, 38900000, 100000, 2147483647, 2147483647, 37900000, 22200000, -7674, -953, 15411, 22900000, -1874, 33000000, 61200000, 17000000, 2147483647, -3386, -12756, 20200000, 13544, 56400000, 2147483647, 15700000, -11798, -130, 12280, 7955, 50100000, -18180, 3431, 2147483647, 2147483647, -482, 12038, -9716, 2239, -5940, 3698, -13716, 1110].span()
};
    let tree_83 = xgb_inference::Tree {
    base_weights: array![-446, 7515, -2253, -330, 13951, -12094, -703, 7804, -9571, 20548, -2312, 16338, -11320, 12891, -1554, -12037, -381, -4258, 24613, -10746, 6900, 15155, -4062, -2605, 9997, -407, 12732, -5919, 245].span(),
    left_children: array![1, 3, 5, 7, 0, 0, 9, 11, 0, 13, 15, 17, 19, 0, 0, 0, 21, 0, 23, 0, 0, 25, 27, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 0, 0, 10, 12, 0, 14, 16, 18, 20, 0, 0, 0, 22, 0, 24, 0, 0, 26, 28, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 2, 0, 1, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![3800000, 3500000, 4400000, 2700000, 13951, -12094, 6100000, 2147483647, -9571, 2147483647, 7600000, 2147483647, 2147483647, 12891, -1554, -12037, 17700000, -4258, 900000, -10746, 6900, 13700000, 24500000, -2605, 9997, -407, 12732, -5919, 245].span()
};
    let tree_84 = xgb_inference::Tree {
    base_weights: array![-422, 2709, -3873, -17, 27311, 6916, -6261, 2065, -7237, -172, 13901, -13900, -2516, 22779, -2275, 11562, -6175, -3933, 43111, -6050, 11885, -12426, -2994, 1252, 20256, 382, -12675, 6031, -1960].span(),
    left_children: array![1, 3, 5, 7, 9, 0, 11, 13, 0, 0, 0, 0, 15, 17, 19, 0, 21, 0, 23, 25, 0, 0, 27, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 0, 12, 14, 0, 0, 0, 0, 16, 18, 20, 0, 22, 0, 24, 26, 0, 0, 28, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![2, 2, 1, 4, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![31100000, 27300000, 19200000, 100000, 2147483647, 6916, 24500000, 2147483647, -7237, -172, 13901, -13900, 28600000, 9600000, 33000000, 11562, 33000000, -3933, 2147483647, 14600000, 11885, -12426, 39200000, 1252, 20256, 382, -12675, 6031, -1960].span()
};
    let tree_85 = xgb_inference::Tree {
    base_weights: array![-12, -4575, 555, 7417, -366, 15448, -1911, 27795, -1962, -15880, 23, 14137, -814, 7760, -1556, -9799, 58].span(),
    left_children: array![1, 0, 3, 0, 5, 7, 9, 11, 0, 0, 13, 0, 0, 0, 15, 0, 0].span(),
    right_children: array![2, 0, 4, 0, 6, 8, 10, 12, 0, 0, 14, 0, 0, 0, 16, 0, 0].span(),
    split_indices: array![2, 0, 2, 0, 1, 2, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0].span(),
    split_conditions: array![1500000, -4575, 2900000, 7417, 1200000, 7300000, 7600000, 2147483647, -1962, -15880, 8400000, 14137, -814, 7760, 9400000, -9799, 58].span()
};
    let tree_86 = xgb_inference::Tree {
    base_weights: array![-113, -970, 9463, 633, -15318, 7586, -5349, -553, 6801, 1292, -9610, -6467, 4344, 746, -15920, -6788, 6597, -740, 9121, -39492, 7979, 659, -5819, -2003, -15846].span(),
    left_children: array![1, 3, 5, 7, 9, 0, 11, 13, 0, 15, 0, 0, 0, 17, 19, 0, 0, 21, 0, 23, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 0, 12, 14, 0, 16, 0, 0, 0, 18, 20, 0, 0, 22, 0, 24, 0, 0, 0, 0, 0].span(),
    split_indices: array![1, 1, 1, 2, 0, 0, 1, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![135200000, 90300000, 165800000, 125100000, 2147483647, 7586, 226400000, 90200000, 6801, 2147483647, -9610, -6467, 4344, 80200000, 2147483647, -6788, 6597, 45600000, 9121, 2147483647, 7979, 659, -5819, -2003, -15846].span()
};
    let tree_87 = xgb_inference::Tree {
    base_weights: array![-153, 431, -3847, 7437, -412, -9881, 1063, 6981, 162, -18022, 1488, -13280, 8265, 8421, 45].span(),
    left_children: array![1, 3, 0, 0, 5, 0, 7, 0, 9, 11, 13, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 0, 0, 6, 0, 8, 0, 10, 12, 14, 0, 0, 0, 0].span(),
    split_indices: array![0, 1, 0, 0, 1, 0, 2, 0, 2, 1, 2, 0, 0, 0, 0].span(),
    split_conditions: array![2147483647, 500000, -3847, 7437, 1100000, -9881, 1600000, 6981, 8000000, 7600000, 8400000, -13280, 8265, 8421, 45].span()
};
    let tree_88 = xgb_inference::Tree {
    base_weights: array![-82, 9406, -1026, -3904, 23050, -18126, 441, 1243, 9907, -35155, 6317, 23562, -1174, 278, -17523, 12174, -1992, -25957, 636, -11, -11285, 14796, -1605, 370, -3439].span(),
    left_children: array![1, 3, 5, 0, 7, 9, 11, 0, 0, 13, 0, 15, 17, 0, 0, 0, 0, 19, 21, 0, 0, 0, 23, 0, 0].span(),
    right_children: array![2, 4, 6, 0, 8, 10, 12, 0, 0, 14, 0, 16, 18, 0, 0, 0, 0, 20, 22, 0, 0, 0, 24, 0, 0].span(),
    split_indices: array![1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![1200000, 600000, 2500000, -3904, 2147483647, 9900000, 3800000, 1243, 9907, 2147483647, 6317, 8400000, 8800000, 278, -17523, 12174, -1992, 2900000, 9700000, -11, -11285, 14796, 2147483647, 370, -3439].span()
};
    let tree_89 = xgb_inference::Tree {
    base_weights: array![0, -5183, 646, -3730, 4235, -902, -11407, 28012, 100, -3314, 8736, 691, 12283, -8508, 3028, 225, -13392, 10998, 260, -5089, 1366, -7827, 788].span(),
    left_children: array![1, 0, 3, 5, 7, 9, 0, 11, 13, 15, 0, 0, 0, 0, 17, 19, 0, 0, 21, 0, 0, 0, 0].span(),
    right_children: array![2, 0, 4, 6, 8, 10, 0, 12, 14, 16, 0, 0, 0, 0, 18, 20, 0, 0, 22, 0, 0, 0, 0].span(),
    split_indices: array![2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![1500000, -5183, 2147483647, 2147483647, 2147483647, 2147483647, -11407, 12300000, 2147483647, 2147483647, 8736, 691, 12283, -8508, 2147483647, 13700000, -13392, 10998, 2147483647, -5089, 1366, -7827, 788].span()
};
    let tree_90 = xgb_inference::Tree {
    base_weights: array![-297, -1983, 4863, -123, -10637, 9436, -1105, -1578, 7013, 4783, -7200, 402, -8037, -4330, 9617, -2386, 15812, 4448, -7630, -47, -9517, -2953, 9098, -3145, 14713].span(),
    left_children: array![1, 3, 5, 7, 0, 0, 9, 11, 0, 13, 0, 15, 0, 17, 0, 19, 21, 23, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 0, 0, 10, 12, 0, 14, 0, 16, 0, 18, 0, 20, 22, 24, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 2, 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![2147483647, 2147483647, 2147483647, 2147483647, -10637, 9436, 97000000, 2147483647, 7013, 40700000, -7200, 2147483647, -8037, 12300000, 9617, 2147483647, 13300000, 10200000, -7630, -47, -9517, -2953, 9098, -3145, 14713].span()
};
    let tree_91 = xgb_inference::Tree {
    base_weights: array![-233, 9676, -1220, -2675, 20055, -15929, 1, 1134, 10198, -9022, 4713, 20669, -1482, -551, 11956, -20406, -131, 493, -9394, 12815, -2117, 2113, -1271].span(),
    left_children: array![1, 3, 5, 0, 7, 9, 11, 0, 0, 0, 0, 13, 15, 0, 0, 17, 19, 0, 0, 0, 21, 0, 0].span(),
    right_children: array![2, 4, 6, 0, 8, 10, 12, 0, 0, 0, 0, 14, 16, 0, 0, 18, 20, 0, 0, 0, 22, 0, 0].span(),
    split_indices: array![1, 1, 1, 0, 2, 2, 1, 0, 0, 0, 0, 1, 2, 0, 0, 2, 2, 0, 0, 0, 1, 0, 0].span(),
    split_conditions: array![1200000, 600000, 2500000, -2675, 7500000, 10100000, 3800000, 1134, 10198, -9022, 4713, 3600000, 8800000, -551, 11956, 2900000, 9700000, 493, -9394, 12815, 10700000, 2113, -1271].span()
};
    let tree_92 = xgb_inference::Tree {
    base_weights: array![144, 8691, -1129, -4270, 9164, -7499, 3, 9549, -8414, 7513, -1206, 10909, -15095, -22234, 778, 2704, -9445, -36197, 3317, 23580, -1156, -19366, 3313, 1660, 11037, -2042, 1570].span(),
    left_children: array![1, 3, 5, 7, 0, 0, 9, 11, 0, 0, 13, 0, 15, 17, 19, 0, 0, 21, 0, 23, 25, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 0, 0, 10, 12, 0, 0, 14, 0, 16, 18, 20, 0, 0, 22, 0, 24, 26, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![2, 2, 2, 0, 0, 0, 2, 1, 0, 0, 1, 0, 0, 2, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![7700000, 7100000, 8300000, 2147483647, 9164, -7499, 8600000, 1400000, -8414, 7513, 4400000, 10909, 2147483647, 11800000, 11800000, 2704, -9445, 2147483647, 3317, 11300000, 2147483647, -19366, 3313, 1660, 11037, -2042, 1570].span()
};
    let tree_93 = xgb_inference::Tree {
    base_weights: array![111, -742, 9548, 2322, -5864, -3534, 8142, -1102, 32737, -209, -23201, 3522, -5621, 1768, -12310, -1899, 15398, -4223, 9064, -41474, 2420, 16118, -3682, -18301, 4040, -14508, -3878, 856, 17480, -12929, 205, 1248, -11037, 6446, -1445].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 0, 13, 15, 17, 19, 0, 0, 21, 0, 0, 0, 23, 0, 25, 0, 27, 29, 31, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 0, 14, 16, 18, 20, 0, 0, 22, 0, 0, 0, 24, 0, 26, 0, 28, 30, 32, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 2, 0, 0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![135200000, 2147483647, 2147483647, 2147483647, 58000000, 2147483647, 8142, 2147483647, 13300000, 49800000, 175100000, 3522, -5621, 9800000, -12310, -1899, 15398, 2147483647, 9064, 82700000, 2420, 2147483647, 13600000, 2147483647, 2147483647, -14508, -3878, 856, 17480, -12929, 205, 1248, -11037, 6446, -1445].span()
};
    let tree_94 = xgb_inference::Tree {
    base_weights: array![36, -4244, 558, 11241, -1013, 31389, -2855, -19851, 698, -875, 15948, -11054, 22135, -29067, 799, 24310, -1100, 10408, 295, 3471, -16876, -2835, 14728, -12169, 1466, 9357, -7023, 10956, -139].span(),
    left_children: array![1, 0, 3, 5, 7, 9, 11, 13, 15, 0, 0, 0, 17, 19, 0, 21, 23, 0, 0, 0, 0, 0, 0, 25, 27, 0, 0, 0, 0].span(),
    right_children: array![2, 0, 4, 6, 8, 10, 12, 14, 16, 0, 0, 0, 18, 20, 0, 22, 24, 0, 0, 0, 0, 0, 0, 26, 28, 0, 0, 0, 0].span(),
    split_indices: array![2, 0, 2, 0, 1, 0, 0, 2, 1, 0, 0, 0, 2, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0].span(),
    split_conditions: array![1500000, -4244, 8100000, 2147483647, 3700000, 2147483647, 2147483647, 10200000, 5000000, -875, 15948, -11054, 7000000, 2147483647, 799, 12100000, 12800000, 10408, 295, 3471, -16876, -2835, 14728, 2147483647, 13900000, 9357, -7023, 10956, -139].span()
};
    let tree_95 = xgb_inference::Tree {
    base_weights: array![347, -3532, 954, 11988, -515, -763, 10238, -17559, 988, 11357, -7673, -7799, 666, 20648, -508, -5689, 9369, -2368, 12473, -8483, 1953, 784, -8036, 5907, -581].span(),
    left_children: array![1, 0, 3, 5, 7, 9, 0, 11, 13, 15, 0, 0, 0, 17, 19, 0, 0, 0, 0, 21, 23, 0, 0, 0, 0].span(),
    right_children: array![2, 0, 4, 6, 8, 10, 0, 12, 14, 16, 0, 0, 0, 18, 20, 0, 0, 0, 0, 22, 24, 0, 0, 0, 0].span(),
    split_indices: array![2, 0, 2, 2, 1, 0, 0, 2, 1, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0].span(),
    split_conditions: array![2600000, -3532, 8100000, 7600000, 3700000, 2147483647, 10238, 10200000, 5000000, 2147483647, -7673, -7799, 666, 12100000, 15700000, -5689, 9369, -2368, 12473, 10700000, 25800000, 784, -8036, 5907, -581].span()
};
    let tree_96 = xgb_inference::Tree {
    base_weights: array![269, -8468, 1211, -19605, 3565, 6478, 330, 3691, -11056, -6920, 1372, 11720, -874, 31558, -8721, -24481, 1126, -89, 13860, -12606, 4268, -10234, -1700, 9679, -209].span(),
    left_children: array![1, 3, 5, 7, 0, 0, 9, 0, 0, 0, 11, 13, 15, 17, 19, 21, 23, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 0, 0, 10, 0, 0, 0, 12, 14, 16, 18, 20, 22, 24, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![2147483647, 61100000, 2147483647, 566000000, 3565, 6478, 2147483647, 3691, -11056, -6920, 2147483647, 19200000, 2147483647, 12700000, 37900000, 65000000, 2147483647, -89, 13860, -12606, 4268, -10234, -1700, 9679, -209].span()
};
    let tree_97 = xgb_inference::Tree {
    base_weights: array![143, -525, 12413, 606, -20609, 6239, -699, -637, 8728, -11401, 2048, 350, -6037, -743, 17976, -882, 2680, -290, 8371].span(),
    left_children: array![1, 3, 5, 7, 9, 0, 0, 11, 0, 0, 0, 13, 0, 15, 17, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 0, 0, 12, 0, 0, 0, 14, 0, 16, 18, 0, 0, 0, 0].span(),
    split_indices: array![2, 2, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0].span(),
    split_conditions: array![245800000, 188500000, 2147483647, 161500000, 2147483647, 6239, -699, 132200000, 8728, -11401, 2048, 105800000, -6037, 2147483647, 58000000, -882, 2680, -290, 8371].span()
};
    let tree_98 = xgb_inference::Tree {
    base_weights: array![245, -4463, 775, 4769, -1394, 16531, -2562, -17939, 731, -4842, 25832, -13455, 6429, -14623, 6810, 6996, -630, 944, 14614, -2721, 9635, 8967, -4995, -8091, 1197, 5974, -8166, 4343, -5007, 9329, -355].span(),
    left_children: array![1, 0, 3, 5, 7, 9, 11, 13, 15, 0, 17, 0, 19, 0, 21, 0, 23, 25, 0, 27, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 0, 4, 6, 8, 10, 12, 14, 16, 0, 18, 0, 20, 0, 22, 0, 24, 26, 0, 28, 0, 0, 0, 0, 30, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 0, 0, 1, 0, 0, 1, 2, 0, 0, 1, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![250100000, -4463, 2147483647, 19200000, 2147483647, 2147483647, 25900000, 25800000, 2147483647, -4842, 13600000, -13455, 2147483647, -14623, 43200000, 6996, 2147483647, 9200000, 14614, 2147483647, 9635, 8967, -4995, -8091, 2147483647, 5974, -8166, 4343, -5007, 9329, -355].span()
};
    let tree_99 = xgb_inference::Tree {
    base_weights: array![68, -2257, 3923, -522, -9874, 32138, -1691, 1599, -23967, 149, 17829, -20343, 4250, -3208, 17303, -1611, -9205, 1145, -30553, 7550, 225, 167, -24217, -4118, 29882, -12169, -1238, -15923, 4420, -1051, 5871, -13540, 4356, 14524, 2586, -8213, 1143, 8244, -559].span(),
    left_children: array![1, 3, 5, 7, 0, 9, 11, 13, 15, 0, 0, 17, 19, 21, 23, 0, 0, 0, 25, 0, 27, 29, 31, 0, 33, 0, 0, 35, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 0, 10, 12, 14, 16, 0, 0, 18, 20, 22, 24, 0, 0, 0, 26, 0, 28, 30, 32, 0, 34, 0, 0, 36, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![2, 2, 1, 4, 0, 0, 2, 1, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 1, 0, 1, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![49500000, 46100000, 39200000, 100000, -9874, 2147483647, 70900000, 22200000, 696100000, 149, 17829, 2147483647, 76900000, 15900000, 2147483647, -1611, -9205, 1145, 52800000, 7550, 58000000, 13300000, 30100000, -4118, 2147483647, -12169, -1238, 2147483647, 2147483647, -1051, 5871, -13540, 4356, 14524, 2586, -8213, 1143, 8244, -559].span()
};
    let num_trees: u32 = 100;
    let base_score: i32 = 21017;
    let opt_type: u8 = 1;
    let trees: Span<xgb_inference::Tree> = array![tree_0, tree_1, tree_2, tree_3, tree_4, tree_5, tree_6, tree_7, tree_8, tree_9, tree_10, tree_11, tree_12, tree_13, tree_14, tree_15, tree_16, tree_17, tree_18, tree_19, tree_20, tree_21, tree_22, tree_23, tree_24, tree_25, tree_26, tree_27, tree_28, tree_29, tree_30, tree_31, tree_32, tree_33, tree_34, tree_35, tree_36, tree_37, tree_38, tree_39, tree_40, tree_41, tree_42, tree_43, tree_44, tree_45, tree_46, tree_47, tree_48, tree_49, tree_50, tree_51, tree_52, tree_53, tree_54, tree_55, tree_56, tree_57, tree_58, tree_59, tree_60, tree_61, tree_62, tree_63, tree_64, tree_65, tree_66, tree_67, tree_68, tree_69, tree_70, tree_71, tree_72, tree_73, tree_74, tree_75, tree_76, tree_77, tree_78, tree_79, tree_80, tree_81, tree_82, tree_83, tree_84, tree_85, tree_86, tree_87, tree_88, tree_89, tree_90, tree_91, tree_92, tree_93, tree_94, tree_95, tree_96, tree_97, tree_98, tree_99].span();
    let mut result: i32 = xgb_inference::accumulate_scores_from_trees(num_trees, trees, input_vector, 0, 0);

    if opt_type == 1 {
        // Implement logic here
    } else {
        result = result + base_score;
    }

    return result;
}